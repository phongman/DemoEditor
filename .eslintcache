[{"D:\\ANTLR\\antlr\\src\\App.js":"1","D:\\ANTLR\\antlr\\src\\Grammar\\NQLParserListener.js":"2","D:\\ANTLR\\antlr\\src\\Grammar\\NQLParser.js":"3","D:\\ANTLR\\antlr\\src\\index.js":"4","D:\\ANTLR\\antlr\\src\\examples.js":"5","D:\\ANTLR\\antlr\\src\\reportWebVitals.js":"6","D:\\ANTLR\\antlr\\src\\Grammar\\NqlParser.js":"7","D:\\ANTLR\\antlr\\src\\Grammar\\NqlLexer.js":"8","D:\\ANTLR\\antlr\\src\\Grammar\\NqlParserListener.js":"9","D:\\ANTLR\\antlr\\src\\ClassStore.js":"10"},{"size":9476,"mtime":1608866011220,"results":"11","hashOfConfig":"12"},{"size":7456,"mtime":1608277098451,"results":"13","hashOfConfig":"12"},{"size":98183,"mtime":1608721339235,"results":"14","hashOfConfig":"12"},{"size":500,"mtime":1608280517236,"results":"15","hashOfConfig":"12"},{"size":2307,"mtime":1608177670572,"results":"16","hashOfConfig":"12"},{"size":362,"mtime":1606294635267,"results":"17","hashOfConfig":"12"},{"size":98190,"mtime":1608721440678,"results":"18","hashOfConfig":"12"},{"size":47575,"mtime":1608721327733,"results":"19","hashOfConfig":"12"},{"size":7456,"mtime":1608721339238,"results":"20","hashOfConfig":"12"},{"size":3649,"mtime":1608865750880,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"jex1p6",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"D:\\ANTLR\\antlr\\src\\App.js",["49","50","51","52","53","54","55"],"D:\\ANTLR\\antlr\\src\\Grammar\\NQLParserListener.js",[],["56","57"],"D:\\ANTLR\\antlr\\src\\Grammar\\NQLParser.js",["58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"D:\\ANTLR\\antlr\\src\\index.js",[],["82","83"],"D:\\ANTLR\\antlr\\src\\examples.js",[],"D:\\ANTLR\\antlr\\src\\reportWebVitals.js",[],["84","85"],"D:\\ANTLR\\antlr\\src\\Grammar\\NqlParser.js",["86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109"],"// Generated from NqlParser.g4 by ANTLR 4.9\r\n// jshint ignore: start\r\nimport antlr4 from 'antlr4';\r\nimport NqlParserListener from './NqlParserListener.js';\r\n\r\nconst serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\",\r\n    \"\\u5964\\u0003>\\u010d\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0004\\u0004\",\r\n    \"\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\\t\\u0007\",\r\n    \"\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0004\\u000b\\t\\u000b\\u0004\\f\\t\\f\",\r\n    \"\\u0004\\r\\t\\r\\u0004\\u000e\\t\\u000e\\u0004\\u000f\\t\\u000f\\u0004\\u0010\\t\\u0010\",\r\n    \"\\u0004\\u0011\\t\\u0011\\u0004\\u0012\\t\\u0012\\u0003\\u0002\\u0003\\u0002\\u0003\",\r\n    \"\\u0002\\u0003\\u0002\\u0003\\u0002\\u0007\\u0002*\\n\\u0002\\f\\u0002\\u000e\\u0002\",\r\n    \"-\\u000b\\u0002\\u0005\\u0002/\\n\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\",\r\n    \"\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0005\\u0004=\\n\\u0004\\u0003\\u0004\",\r\n    \"\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0007\\u0004C\\n\\u0004\\f\\u0004\\u000e\",\r\n    \"\\u0004F\\u000b\\u0004\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\",\r\n    \"\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\",\r\n    \"\\u0003\\u0005\\u0005\\u0005S\\n\\u0005\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\",\r\n    \"\\u0005\\u0006X\\n\\u0006\\u0003\\u0006\\u0005\\u0006[\\n\\u0006\\u0003\\u0006\\u0003\",\r\n    \"\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0005\\u0006c\",\r\n    \"\\n\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\",\r\n    \"\\u0003\\u0006\\u0003\\u0006\\u0005\\u0006l\\n\\u0006\\u0003\\u0006\\u0003\\u0006\",\r\n    \"\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\",\r\n    \"\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\",\r\n    \"\\u0005\\u0006|\\n\\u0006\\u0003\\u0007\\u0003\\u0007\\u0005\\u0007\\u0080\\n\\u0007\",\r\n    \"\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0005\\u0007\\u0086\\n\",\r\n    \"\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0005\",\r\n    \"\\u0007\\u008d\\n\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\",\r\n    \"\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\",\r\n    \"\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\",\r\n    \"\\u0003\\u0007\\u0005\\u0007\\u00a0\\n\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\",\r\n    \"\\u0007\\u0005\\u0007\\u00a5\\n\\u0007\\u0003\\u0007\\u0003\\u0007\\u0005\\u0007\",\r\n    \"\\u00a9\\n\\u0007\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\",\r\n    \"\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\",\r\n    \"\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0007\\b\\u00c2\",\r\n    \"\\n\\b\\f\\b\\u000e\\b\\u00c5\\u000b\\b\\u0003\\b\\u0003\\b\\u0005\\b\\u00c9\\n\\b\\u0003\",\r\n    \"\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\",\r\n    \"\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0007\\b\\u00da\\n\\b\\f\\b\\u000e\",\r\n    \"\\b\\u00dd\\u000b\\b\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0007\\t\\u00e4\",\r\n    \"\\n\\t\\f\\t\\u000e\\t\\u00e7\\u000b\\t\\u0005\\t\\u00e9\\n\\t\\u0003\\t\\u0003\\t\\u0003\",\r\n    \"\\n\\u0003\\n\\u0003\\n\\u0007\\n\\u00f0\\n\\n\\f\\n\\u000e\\n\\u00f3\\u000b\\n\\u0003\",\r\n    \"\\u000b\\u0003\\u000b\\u0005\\u000b\\u00f7\\n\\u000b\\u0003\\f\\u0003\\f\\u0003\\f\",\r\n    \"\\u0003\\f\\u0003\\f\\u0003\\f\\u0005\\f\\u00ff\\n\\f\\u0003\\r\\u0003\\r\\u0003\\u000e\",\r\n    \"\\u0003\\u000e\\u0003\\u000f\\u0003\\u000f\\u0003\\u0010\\u0003\\u0010\\u0003\\u0011\",\r\n    \"\\u0003\\u0011\\u0003\\u0012\\u0003\\u0012\\u0003\\u0012\\u0002\\u0004\\u0006\\u000e\",\r\n    \"\\u0013\\u0002\\u0004\\u0006\\b\\n\\f\\u000e\\u0010\\u0012\\u0014\\u0016\\u0018\\u001a\",\r\n    \"\\u001c\\u001e \\\"\\u0002\\n\\u0004\\u0002\\u0004\\u0004\\u0006\\u0006\\u0004\\u0002\",\r\n    \"\\u0005\\u0005\\u0007\\u0007\\u0006\\u0002\\u000f\\u0010((12;=\\u0003\\u0002,\",\r\n    \"-\\u0003\\u0002\\u0018\\u001a\\u0003\\u0002)*\\u0003\\u0002\\u0012\\u0017\\u0003\",\r\n    \"\\u0002 !\\u0002\\u012b\\u0002$\\u0003\\u0002\\u0002\\u0002\\u00040\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0006<\\u0003\\u0002\\u0002\\u0002\\bR\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\n{\\u0003\\u0002\\u0002\\u0002\\f\\u00a8\\u0003\\u0002\\u0002\\u0002\\u000e\\u00c8\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0010\\u00de\\u0003\\u0002\\u0002\\u0002\\u0012\\u00ec\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0014\\u00f6\\u0003\\u0002\\u0002\\u0002\\u0016\\u00fe\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0018\\u0100\\u0003\\u0002\\u0002\\u0002\\u001a\\u0102\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u001c\\u0104\\u0003\\u0002\\u0002\\u0002\\u001e\\u0106\",\r\n    \"\\u0003\\u0002\\u0002\\u0002 \\u0108\\u0003\\u0002\\u0002\\u0002\\\"\\u010a\\u0003\",\r\n    \"\\u0002\\u0002\\u0002$.\\u0005\\u0006\\u0004\\u0002%&\\u0007+\\u0002\\u0002&+\",\r\n    \"\\u0005\\u0004\\u0003\\u0002\\'(\\u0007\\r\\u0002\\u0002(*\\u0005\\u0004\\u0003\",\r\n    \"\\u0002)\\'\\u0003\\u0002\\u0002\\u0002*-\\u0003\\u0002\\u0002\\u0002+)\\u0003\",\r\n    \"\\u0002\\u0002\\u0002+,\\u0003\\u0002\\u0002\\u0002,/\\u0003\\u0002\\u0002\\u0002\",\r\n    \"-+\\u0003\\u0002\\u0002\\u0002.%\\u0003\\u0002\\u0002\\u0002./\\u0003\\u0002\\u0002\",\r\n    \"\\u0002/\\u0003\\u0003\\u0002\\u0002\\u000201\\u0005\\u0012\\n\\u000212\\u0005\",\r\n    \"\\u001a\\u000e\\u00022\\u0005\\u0003\\u0002\\u0002\\u000234\\b\\u0004\\u0001\\u0002\",\r\n    \"4=\\u0005\\f\\u0007\\u00025=\\u0005\\n\\u0006\\u000267\\u0007\\u0004\\u0002\\u0002\",\r\n    \"78\\u0005\\u0006\\u0004\\u000289\\u0007\\u0005\\u0002\\u00029=\\u0003\\u0002\\u0002\",\r\n    \"\\u0002:;\\u0007\\u001f\\u0002\\u0002;=\\u0005\\u0006\\u0004\\u0004<3\\u0003\\u0002\",\r\n    \"\\u0002\\u0002<5\\u0003\\u0002\\u0002\\u0002<6\\u0003\\u0002\\u0002\\u0002<:\\u0003\",\r\n    \"\\u0002\\u0002\\u0002=D\\u0003\\u0002\\u0002\\u0002>?\\f\\u0003\\u0002\\u0002?\",\r\n    \"@\\u0005\\\"\\u0012\\u0002@A\\u0005\\u0006\\u0004\\u0004AC\\u0003\\u0002\\u0002\",\r\n    \"\\u0002B>\\u0003\\u0002\\u0002\\u0002CF\\u0003\\u0002\\u0002\\u0002DB\\u0003\\u0002\",\r\n    \"\\u0002\\u0002DE\\u0003\\u0002\\u0002\\u0002E\\u0007\\u0003\\u0002\\u0002\\u0002\",\r\n    \"FD\\u0003\\u0002\\u0002\\u0002GH\\u0007\\u001d\\u0002\\u0002HS\\u0005\\u000e\\b\",\r\n    \"\\u0002IJ\\u0007\\u001e\\u0002\\u0002JS\\u0005\\u000e\\b\\u0002KL\\u0007\\u001c\",\r\n    \"\\u0002\\u0002LM\\u0007\\u0004\\u0002\\u0002MN\\u0005\\u000e\\b\\u0002NO\\u0007\",\r\n    \"\\r\\u0002\\u0002OP\\u0005\\u000e\\b\\u0002PQ\\u0007\\u0005\\u0002\\u0002QS\\u0003\",\r\n    \"\\u0002\\u0002\\u0002RG\\u0003\\u0002\\u0002\\u0002RI\\u0003\\u0002\\u0002\\u0002\",\r\n    \"RK\\u0003\\u0002\\u0002\\u0002S\\t\\u0003\\u0002\\u0002\\u0002TU\\u0005\\u000e\",\r\n    \"\\b\\u0002UW\\u0007\\u001b\\u0002\\u0002VX\\u0007\\u001f\\u0002\\u0002WV\\u0003\",\r\n    \"\\u0002\\u0002\\u0002WX\\u0003\\u0002\\u0002\\u0002XZ\\u0003\\u0002\\u0002\\u0002\",\r\n    \"Y[\\u0005 \\u0011\\u0002ZY\\u0003\\u0002\\u0002\\u0002Z[\\u0003\\u0002\\u0002\",\r\n    \"\\u0002[\\\\\\u0003\\u0002\\u0002\\u0002\\\\]\\u0005\\u000e\\b\\u0002]^\\u0005\\b\\u0005\",\r\n    \"\\u0002^|\\u0003\\u0002\\u0002\\u0002_`\\u0005\\u000e\\b\\u0002`b\\u0007\\u001b\",\r\n    \"\\u0002\\u0002ac\\u0007\\u001f\\u0002\\u0002ba\\u0003\\u0002\\u0002\\u0002bc\\u0003\",\r\n    \"\\u0002\\u0002\\u0002cd\\u0003\\u0002\\u0002\\u0002de\\u0005\\u001c\\u000f\\u0002\",\r\n    \"ef\\u0005\\u000e\\b\\u0002fg\\u0005\\b\\u0005\\u0002g|\\u0003\\u0002\\u0002\\u0002\",\r\n    \"hi\\u0005\\u000e\\b\\u0002ik\\u0007\\u001b\\u0002\\u0002jl\\u0007\\u001f\\u0002\",\r\n    \"\\u0002kj\\u0003\\u0002\\u0002\\u0002kl\\u0003\\u0002\\u0002\\u0002lm\\u0003\\u0002\",\r\n    \"\\u0002\\u0002mn\\u0007\\u0011\\u0002\\u0002no\\t\\u0002\\u0002\\u0002op\\u0005\",\r\n    \"\\u000e\\b\\u0002pq\\u0007\\r\\u0002\\u0002qr\\u0005\\u000e\\b\\u0002rs\\t\\u0003\",\r\n    \"\\u0002\\u0002st\\u0005\\b\\u0005\\u0002t|\\u0003\\u0002\\u0002\\u0002uv\\u0005\",\r\n    \"\\u000e\\b\\u0002vw\\u0007\\u001b\\u0002\\u0002wx\\u0005\\u001e\\u0010\\u0002x\",\r\n    \"y\\u0005\\u000e\\b\\u0002yz\\u0005\\b\\u0005\\u0002z|\\u0003\\u0002\\u0002\\u0002\",\r\n    \"{T\\u0003\\u0002\\u0002\\u0002{_\\u0003\\u0002\\u0002\\u0002{h\\u0003\\u0002\\u0002\",\r\n    \"\\u0002{u\\u0003\\u0002\\u0002\\u0002|\\u000b\\u0003\\u0002\\u0002\\u0002}\\u007f\",\r\n    \"\\u0005\\u0012\\n\\u0002~\\u0080\\u0007\\u001f\\u0002\\u0002\\u007f~\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u007f\\u0080\\u0003\\u0002\\u0002\\u0002\\u0080\\u0081\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0081\\u0082\\u00070\\u0002\\u0002\\u0082\\u00a9\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0083\\u0085\\u0005\\u000e\\b\\u0002\\u0084\\u0086\\u0007\\u001f\",\r\n    \"\\u0002\\u0002\\u0085\\u0084\\u0003\\u0002\\u0002\\u0002\\u0085\\u0086\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0086\\u0087\\u0003\\u0002\\u0002\\u0002\\u0087\\u0088\\u0005 \",\r\n    \"\\u0011\\u0002\\u0088\\u0089\\u0005\\u000e\\b\\u0002\\u0089\\u00a9\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u008a\\u008c\\u0005\\u000e\\b\\u0002\\u008b\\u008d\\u0007\\u001f\",\r\n    \"\\u0002\\u0002\\u008c\\u008b\\u0003\\u0002\\u0002\\u0002\\u008c\\u008d\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u008d\\u008e\\u0003\\u0002\\u0002\\u0002\\u008e\\u008f\\u0005\\u001c\",\r\n    \"\\u000f\\u0002\\u008f\\u0090\\u0005\\u000e\\b\\u0002\\u0090\\u00a9\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0091\\u0092\\u0005\\u000e\\b\\u0002\\u0092\\u0093\\u0007\\u0011\",\r\n    \"\\u0002\\u0002\\u0093\\u0094\\t\\u0002\\u0002\\u0002\\u0094\\u0095\\u0005\\u000e\",\r\n    \"\\b\\u0002\\u0095\\u0096\\u0007\\r\\u0002\\u0002\\u0096\\u0097\\u0005\\u000e\\b\\u0002\",\r\n    \"\\u0097\\u0098\\t\\u0003\\u0002\\u0002\\u0098\\u00a9\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0099\\u009a\\u0005\\u000e\\b\\u0002\\u009a\\u009b\\u0005\\u001e\\u0010\\u0002\",\r\n    \"\\u009b\\u009c\\u0005\\u000e\\b\\u0002\\u009c\\u00a9\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u009d\\u009f\\u0007.\\u0002\\u0002\\u009e\\u00a0\\u0007\\u001f\\u0002\\u0002\",\r\n    \"\\u009f\\u009e\\u0003\\u0002\\u0002\\u0002\\u009f\\u00a0\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00a0\\u00a1\\u0003\\u0002\\u0002\\u0002\\u00a1\\u00a2\\u0007)\\u0002\\u0002\",\r\n    \"\\u00a2\\u00a9\\u0005\\u0010\\t\\u0002\\u00a3\\u00a5\\u0007\\u001f\\u0002\\u0002\",\r\n    \"\\u00a4\\u00a3\\u0003\\u0002\\u0002\\u0002\\u00a4\\u00a5\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00a5\\u00a6\\u0003\\u0002\\u0002\\u0002\\u00a6\\u00a7\\u0007/\\u0002\\u0002\",\r\n    \"\\u00a7\\u00a9\\u0005\\u0010\\t\\u0002\\u00a8}\\u0003\\u0002\\u0002\\u0002\\u00a8\",\r\n    \"\\u0083\\u0003\\u0002\\u0002\\u0002\\u00a8\\u008a\\u0003\\u0002\\u0002\\u0002\\u00a8\",\r\n    \"\\u0091\\u0003\\u0002\\u0002\\u0002\\u00a8\\u0099\\u0003\\u0002\\u0002\\u0002\\u00a8\",\r\n    \"\\u009d\\u0003\\u0002\\u0002\\u0002\\u00a8\\u00a4\\u0003\\u0002\\u0002\\u0002\\u00a9\",\r\n    \"\\r\\u0003\\u0002\\u0002\\u0002\\u00aa\\u00ab\\b\\b\\u0001\\u0002\\u00ab\\u00c9\\u0005\",\r\n    \"\\u0018\\r\\u0002\\u00ac\\u00c9\\u0005\\u0016\\f\\u0002\\u00ad\\u00c9\\u0005\\u0012\",\r\n    \"\\n\\u0002\\u00ae\\u00af\\u0007\\u0004\\u0002\\u0002\\u00af\\u00b0\\u0005\\u000e\",\r\n    \"\\b\\u0002\\u00b0\\u00b1\\u0007\\u0005\\u0002\\u0002\\u00b1\\u00c9\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00b2\\u00c9\\u0005\\u0010\\t\\u0002\\u00b3\\u00b4\\u0007$\\u0002\",\r\n    \"\\u0002\\u00b4\\u00c9\\u0005\\u000e\\b\\n\\u00b5\\u00b6\\u0007\\u0004\\u0002\\u0002\",\r\n    \"\\u00b6\\u00b7\\u0005\\u0006\\u0004\\u0002\\u00b7\\u00b8\\u0007\\t\\u0002\\u0002\",\r\n    \"\\u00b8\\u00b9\\u0005\\u000e\\b\\u0002\\u00b9\\u00ba\\u0007\\n\\u0002\\u0002\\u00ba\",\r\n    \"\\u00bb\\u0005\\u000e\\b\\u0002\\u00bb\\u00bc\\u0007\\u0005\\u0002\\u0002\\u00bc\",\r\n    \"\\u00c9\\u0003\\u0002\\u0002\\u0002\\u00bd\\u00be\\u0007\\u0006\\u0002\\u0002\\u00be\",\r\n    \"\\u00c3\\u0005\\u000e\\b\\u0002\\u00bf\\u00c0\\u0007\\r\\u0002\\u0002\\u00c0\\u00c2\",\r\n    \"\\u0005\\u000e\\b\\u0002\\u00c1\\u00bf\\u0003\\u0002\\u0002\\u0002\\u00c2\\u00c5\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c3\\u00c1\\u0003\\u0002\\u0002\\u0002\\u00c3\\u00c4\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c4\\u00c6\\u0003\\u0002\\u0002\\u0002\\u00c5\\u00c3\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c6\\u00c7\\u0007\\u0007\\u0002\\u0002\\u00c7\\u00c9\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00aa\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00ac\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00ad\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00ae\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00b2\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00b3\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00b5\\u0003\\u0002\\u0002\\u0002\\u00c8\\u00bd\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c9\\u00db\\u0003\\u0002\\u0002\\u0002\\u00ca\\u00cb\",\r\n    \"\\f\\t\\u0002\\u0002\\u00cb\\u00cc\\u0007%\\u0002\\u0002\\u00cc\\u00da\\u0005\\u000e\",\r\n    \"\\b\\n\\u00cd\\u00ce\\f\\b\\u0002\\u0002\\u00ce\\u00cf\\u0007&\\u0002\\u0002\\u00cf\",\r\n    \"\\u00da\\u0005\\u000e\\b\\t\\u00d0\\u00d1\\f\\u0007\\u0002\\u0002\\u00d1\\u00d2\\u0007\",\r\n    \"\\'\\u0002\\u0002\\u00d2\\u00da\\u0005\\u000e\\b\\b\\u00d3\\u00d4\\f\\u0006\\u0002\",\r\n    \"\\u0002\\u00d4\\u00d5\\u0007#\\u0002\\u0002\\u00d5\\u00da\\u0005\\u000e\\b\\u0007\",\r\n    \"\\u00d6\\u00d7\\f\\u0005\\u0002\\u0002\\u00d7\\u00d8\\u0007$\\u0002\\u0002\\u00d8\",\r\n    \"\\u00da\\u0005\\u000e\\b\\u0006\\u00d9\\u00ca\\u0003\\u0002\\u0002\\u0002\\u00d9\",\r\n    \"\\u00cd\\u0003\\u0002\\u0002\\u0002\\u00d9\\u00d0\\u0003\\u0002\\u0002\\u0002\\u00d9\",\r\n    \"\\u00d3\\u0003\\u0002\\u0002\\u0002\\u00d9\\u00d6\\u0003\\u0002\\u0002\\u0002\\u00da\",\r\n    \"\\u00dd\\u0003\\u0002\\u0002\\u0002\\u00db\\u00d9\\u0003\\u0002\\u0002\\u0002\\u00db\",\r\n    \"\\u00dc\\u0003\\u0002\\u0002\\u0002\\u00dc\\u000f\\u0003\\u0002\\u0002\\u0002\\u00dd\",\r\n    \"\\u00db\\u0003\\u0002\\u0002\\u0002\\u00de\\u00df\\u00073\\u0002\\u0002\\u00df\",\r\n    \"\\u00e8\\u0007\\u0004\\u0002\\u0002\\u00e0\\u00e5\\u0005\\u000e\\b\\u0002\\u00e1\",\r\n    \"\\u00e2\\u0007\\r\\u0002\\u0002\\u00e2\\u00e4\\u0005\\u000e\\b\\u0002\\u00e3\\u00e1\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00e4\\u00e7\\u0003\\u0002\\u0002\\u0002\\u00e5\\u00e3\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00e5\\u00e6\\u0003\\u0002\\u0002\\u0002\\u00e6\\u00e9\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00e7\\u00e5\\u0003\\u0002\\u0002\\u0002\\u00e8\\u00e0\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00e8\\u00e9\\u0003\\u0002\\u0002\\u0002\\u00e9\\u00ea\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00ea\\u00eb\\u0007\\u0005\\u0002\\u0002\\u00eb\\u0011\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00ec\\u00f1\\u0005\\u0014\\u000b\\u0002\\u00ed\\u00ee\",\r\n    \"\\u0007\\f\\u0002\\u0002\\u00ee\\u00f0\\u0005\\u0014\\u000b\\u0002\\u00ef\\u00ed\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00f0\\u00f3\\u0003\\u0002\\u0002\\u0002\\u00f1\\u00ef\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00f1\\u00f2\\u0003\\u0002\\u0002\\u0002\\u00f2\\u0013\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00f3\\u00f1\\u0003\\u0002\\u0002\\u0002\\u00f4\\u00f7\",\r\n    \"\\u00073\\u0002\\u0002\\u00f5\\u00f7\\u00074\\u0002\\u0002\\u00f6\\u00f4\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00f6\\u00f5\\u0003\\u0002\\u0002\\u0002\\u00f7\\u0015\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00f8\\u00ff\\u00075\\u0002\\u0002\\u00f9\\u00ff\\u0007\",\r\n    \"6\\u0002\\u0002\\u00fa\\u00ff\\u00077\\u0002\\u0002\\u00fb\\u00ff\\u00078\\u0002\",\r\n    \"\\u0002\\u00fc\\u00ff\\u00079\\u0002\\u0002\\u00fd\\u00ff\\u0007:\\u0002\\u0002\",\r\n    \"\\u00fe\\u00f8\\u0003\\u0002\\u0002\\u0002\\u00fe\\u00f9\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00fe\\u00fa\\u0003\\u0002\\u0002\\u0002\\u00fe\\u00fb\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00fe\\u00fc\\u0003\\u0002\\u0002\\u0002\\u00fe\\u00fd\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00ff\\u0017\\u0003\\u0002\\u0002\\u0002\\u0100\\u0101\\t\\u0004\\u0002\\u0002\",\r\n    \"\\u0101\\u0019\\u0003\\u0002\\u0002\\u0002\\u0102\\u0103\\t\\u0005\\u0002\\u0002\",\r\n    \"\\u0103\\u001b\\u0003\\u0002\\u0002\\u0002\\u0104\\u0105\\t\\u0006\\u0002\\u0002\",\r\n    \"\\u0105\\u001d\\u0003\\u0002\\u0002\\u0002\\u0106\\u0107\\t\\u0007\\u0002\\u0002\",\r\n    \"\\u0107\\u001f\\u0003\\u0002\\u0002\\u0002\\u0108\\u0109\\t\\b\\u0002\\u0002\\u0109\",\r\n    \"!\\u0003\\u0002\\u0002\\u0002\\u010a\\u010b\\t\\t\\u0002\\u0002\\u010b#\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u001b+.<DRWZbk{\\u007f\\u0085\\u008c\\u009f\\u00a4\\u00a8\\u00c3\",\r\n    \"\\u00c8\\u00d9\\u00db\\u00e5\\u00e8\\u00f1\\u00f6\\u00fe\"].join(\"\");\r\n\r\n\r\nexport const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\r\n\r\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\r\n\r\nconst sharedContextCache = new antlr4.PredictionContextCache();\r\n\r\nexport default class NqlParser extends antlr4.Parser {\r\n\r\n    static grammarFileName = \"NqlParser.g4\";\r\n    static literalNames = [ null, \"'_'\", \"'('\", \"')'\", \"'['\", \"']'\", \"'|'\", \r\n                            \"'?'\", \"':'\", \"';'\", \"'.'\", \"','\", null, null, \r\n                            null, null, null, null, null, null, null, null, \r\n                            null, null, null, null, null, null, null, null, \r\n                            null, null, null, \"'+'\", \"'-'\", \"'*'\", \"'/'\", \r\n                            \"'%'\" ];\r\n    static symbolicNames = [ null, \"UNDERSCORE\", \"LP\", \"RP\", \"LB\", \"RB\", \r\n                             \"PIPE\", \"QUESTION\", \"COLON\", \"SEMI_COLON\", \r\n                             \"DOT\", \"COMMA\", \"AS\", \"TRUE\", \"FALSE\", \"BETWEEN\", \r\n                             \"EQUALS\", \"NOT_EQUALS\", \"GREATER\", \"LESS\", \r\n                             \"GREATER_EQUALS\", \"LESS_EQUALS\", \"REGEX_MATCH\", \r\n                             \"MATCH\", \"EXACTLY_MATCH\", \"WAS\", \"DURING\", \r\n                             \"BEFORE\", \"AFTER\", \"NOT\", \"AND\", \"OR\", \"XOR\", \r\n                             \"ADD\", \"SUBTRACT\", \"MULTIPLY\", \"DIVIDE\", \"MOD\", \r\n                             \"NULL\", \"IN\", \"NOT_IN\", \"ORDERBY\", \"ASC\", \"DESC\", \r\n                             \"ISSUE\", \"SATISFY\", \"EXISTS\", \"UNSIGN\", \"DECIMAL\", \r\n                             \"ID\", \"KEY\", \"MILLIS\", \"SECONDS\", \"MINUTES\", \r\n                             \"HOURS\", \"DAYS\", \"WEEKS\", \"DATE\", \"DATETIME\", \r\n                             \"STRING\", \"WS\" ];\r\n    static ruleNames = [ \"query\", \"sortTuple\", \"logic\", \"period\", \"historicalCompare\", \r\n                         \"compare\", \"factor\", \"functionCall\", \"path\", \"pathElement\", \r\n                         \"duration\", \"raw\", \"sortDirection\", \"stringOperator\", \r\n                         \"collectionOperator\", \"compareOperator\", \"logicBinaryOp\" ];\r\n\r\n    constructor(input) {\r\n        super(input);\r\n        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\r\n        this.ruleNames = NqlParser.ruleNames;\r\n        this.literalNames = NqlParser.literalNames;\r\n        this.symbolicNames = NqlParser.symbolicNames;\r\n    }\r\n\r\n    get atn() {\r\n        return atn;\r\n    }\r\n\r\n    sempred(localctx, ruleIndex, predIndex) {\r\n    \tswitch(ruleIndex) {\r\n    \tcase 2:\r\n    \t    \t\treturn this.logic_sempred(localctx, predIndex);\r\n    \tcase 6:\r\n    \t    \t\treturn this.factor_sempred(localctx, predIndex);\r\n        default:\r\n            throw \"No predicate with index:\" + ruleIndex;\r\n       }\r\n    }\r\n\r\n    logic_sempred(localctx, predIndex) {\r\n    \tswitch(predIndex) {\r\n    \t\tcase 0:\r\n    \t\t\treturn this.precpred(this._ctx, 1);\r\n    \t\tdefault:\r\n    \t\t\tthrow \"No predicate with index:\" + predIndex;\r\n    \t}\r\n    };\r\n\r\n    factor_sempred(localctx, predIndex) {\r\n    \tswitch(predIndex) {\r\n    \t\tcase 1:\r\n    \t\t\treturn this.precpred(this._ctx, 7);\r\n    \t\tcase 2:\r\n    \t\t\treturn this.precpred(this._ctx, 6);\r\n    \t\tcase 3:\r\n    \t\t\treturn this.precpred(this._ctx, 5);\r\n    \t\tcase 4:\r\n    \t\t\treturn this.precpred(this._ctx, 4);\r\n    \t\tcase 5:\r\n    \t\t\treturn this.precpred(this._ctx, 3);\r\n    \t\tdefault:\r\n    \t\t\tthrow \"No predicate with index:\" + predIndex;\r\n    \t}\r\n    };\r\n\r\n\r\n\r\n\r\n\tquery() {\r\n\t    let localctx = new QueryContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 0, NqlParser.RULE_query);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 34;\r\n\t        this.logic(0);\r\n\t        this.state = 44;\r\n\t        this._errHandler.sync(this);\r\n\t        _la = this._input.LA(1);\r\n\t        if(_la===NqlParser.ORDERBY) {\r\n\t            this.state = 35;\r\n\t            this.match(NqlParser.ORDERBY);\r\n\t            this.state = 36;\r\n\t            localctx._sortTuple = this.sortTuple();\r\n\t            localctx.sortTuples.push(localctx._sortTuple);\r\n\t            this.state = 41;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            while(_la===NqlParser.COMMA) {\r\n\t                this.state = 37;\r\n\t                this.match(NqlParser.COMMA);\r\n\t                this.state = 38;\r\n\t                localctx._sortTuple = this.sortTuple();\r\n\t                localctx.sortTuples.push(localctx._sortTuple);\r\n\t                this.state = 43;\r\n\t                this._errHandler.sync(this);\r\n\t                _la = this._input.LA(1);\r\n\t            }\r\n\t        }\r\n\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tsortTuple() {\r\n\t    let localctx = new SortTupleContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 2, NqlParser.RULE_sortTuple);\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 46;\r\n\t        this.path();\r\n\t        this.state = 47;\r\n\t        this.sortDirection();\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\tlogic(_p) {\r\n\t\tif(_p===undefined) {\r\n\t\t    _p = 0;\r\n\t\t}\r\n\t    const _parentctx = this._ctx;\r\n\t    const _parentState = this.state;\r\n\t    let localctx = new LogicContext(this, this._ctx, _parentState);\r\n\t    let _prevctx = localctx;\r\n\t    const _startState = 4;\r\n\t    this.enterRecursionRule(localctx, 4, NqlParser.RULE_logic, _p);\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 58;\r\n\t        this._errHandler.sync(this);\r\n\t        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);\r\n\t        switch(la_) {\r\n\t        case 1:\r\n\t            localctx = new LogicCompareExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\r\n\t            this.state = 50;\r\n\t            this.compare();\r\n\t            break;\r\n\r\n\t        case 2:\r\n\t            localctx = new LogicHistoricalCompareExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 51;\r\n\t            this.historicalCompare();\r\n\t            break;\r\n\r\n\t        case 3:\r\n\t            localctx = new LogicPrecededExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 52;\r\n\t            this.match(NqlParser.LP);\r\n\t            this.state = 53;\r\n\t            localctx.inner = this.logic(0);\r\n\t            this.state = 54;\r\n\t            this.match(NqlParser.RP);\r\n\t            break;\r\n\r\n\t        case 4:\r\n\t            localctx = new LogicNotExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 56;\r\n\t            this.match(NqlParser.NOT);\r\n\t            this.state = 57;\r\n\t            localctx.inner = this.logic(2);\r\n\t            break;\r\n\r\n\t        }\r\n\t        this._ctx.stop = this._input.LT(-1);\r\n\t        this.state = 66;\r\n\t        this._errHandler.sync(this);\r\n\t        let _alt = this._interp.adaptivePredict(this._input,3,this._ctx)\r\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n\t            if(_alt===1) {\r\n\t                if(this._parseListeners!==null) {\r\n\t                    this.triggerExitRuleEvent();\r\n\t                }\r\n\t                _prevctx = localctx;\r\n\t                localctx = new LogicBinaryExprContext(this, new LogicContext(this, _parentctx, _parentState));\r\n\t                localctx.left = _prevctx;\r\n\t                this.pushNewRecursionContext(localctx, _startState, NqlParser.RULE_logic);\r\n\t                this.state = 60;\r\n\t                if (!( this.precpred(this._ctx, 1))) {\r\n\t                    throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 1)\");\r\n\t                }\r\n\t                this.state = 61;\r\n\t                localctx.op = this.logicBinaryOp();\r\n\t                this.state = 62;\r\n\t                localctx.right = this.logic(2); \r\n\t            }\r\n\t            this.state = 68;\r\n\t            this._errHandler.sync(this);\r\n\t            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);\r\n\t        }\r\n\r\n\t    } catch( error) {\r\n\t        if(error instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = error;\r\n\t\t        this._errHandler.reportError(this, error);\r\n\t\t        this._errHandler.recover(this, error);\r\n\t\t    } else {\r\n\t\t    \tthrow error;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.unrollRecursionContexts(_parentctx)\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tperiod() {\r\n\t    let localctx = new PeriodContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 6, NqlParser.RULE_period);\r\n\t    try {\r\n\t        this.state = 80;\r\n\t        this._errHandler.sync(this);\r\n\t        switch(this._input.LA(1)) {\r\n\t        case NqlParser.BEFORE:\r\n\t            this.enterOuterAlt(localctx, 1);\r\n\t            this.state = 69;\r\n\t            this.match(NqlParser.BEFORE);\r\n\t            this.state = 70;\r\n\t            localctx.from = this.factor(0);\r\n\t            break;\r\n\t        case NqlParser.AFTER:\r\n\t            this.enterOuterAlt(localctx, 2);\r\n\t            this.state = 71;\r\n\t            this.match(NqlParser.AFTER);\r\n\t            this.state = 72;\r\n\t            localctx.from = this.factor(0);\r\n\t            break;\r\n\t        case NqlParser.DURING:\r\n\t            this.enterOuterAlt(localctx, 3);\r\n\t            this.state = 73;\r\n\t            this.match(NqlParser.DURING);\r\n\t            this.state = 74;\r\n\t            this.match(NqlParser.LP);\r\n\t            this.state = 75;\r\n\t            localctx.from = this.factor(0);\r\n\t            this.state = 76;\r\n\t            this.match(NqlParser.COMMA);\r\n\t            this.state = 77;\r\n\t            localctx.to = this.factor(0);\r\n\t            this.state = 78;\r\n\t            this.match(NqlParser.RP);\r\n\t            break;\r\n\t        default:\r\n\t            throw new antlr4.error.NoViableAltException(this);\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\thistoricalCompare() {\r\n\t    let localctx = new HistoricalCompareContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 8, NqlParser.RULE_historicalCompare);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.state = 121;\r\n\t        this._errHandler.sync(this);\r\n\t        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);\r\n\t        switch(la_) {\r\n\t        case 1:\r\n\t            localctx = new HistoricalNumericCompareExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 1);\r\n\t            this.state = 82;\r\n\t            localctx.left = this.factor(0);\r\n\t            this.state = 83;\r\n\t            this.match(NqlParser.WAS);\r\n\t            this.state = 85;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 84;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 88;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << NqlParser.EQUALS) | (1 << NqlParser.NOT_EQUALS) | (1 << NqlParser.GREATER) | (1 << NqlParser.LESS) | (1 << NqlParser.GREATER_EQUALS) | (1 << NqlParser.LESS_EQUALS))) !== 0)) {\r\n\t                this.state = 87;\r\n\t                localctx.op = this.compareOperator();\r\n\t            }\r\n\r\n\t            this.state = 90;\r\n\t            localctx.right = this.factor(0);\r\n\t            this.state = 91;\r\n\t            this.period();\r\n\t            break;\r\n\r\n\t        case 2:\r\n\t            localctx = new HistoricalStringMatchExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 2);\r\n\t            this.state = 93;\r\n\t            localctx.value = this.factor(0);\r\n\t            this.state = 94;\r\n\t            this.match(NqlParser.WAS);\r\n\t            this.state = 96;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 95;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 98;\r\n\t            localctx.op = this.stringOperator();\r\n\t            this.state = 99;\r\n\t            localctx.pattern = this.factor(0);\r\n\t            this.state = 100;\r\n\t            this.period();\r\n\t            break;\r\n\r\n\t        case 3:\r\n\t            localctx = new HistoricalBetweenExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 3);\r\n\t            this.state = 102;\r\n\t            localctx.value = this.factor(0);\r\n\t            this.state = 103;\r\n\t            this.match(NqlParser.WAS);\r\n\t            this.state = 105;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 104;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 107;\r\n\t            this.match(NqlParser.BETWEEN);\r\n\t            this.state = 108;\r\n\t            localctx.includeLower = this._input.LT(1);\r\n\t            _la = this._input.LA(1);\r\n\t            if(!(_la===NqlParser.LP || _la===NqlParser.LB)) {\r\n\t                localctx.includeLower = this._errHandler.recoverInline(this);\r\n\t            }\r\n\t            else {\r\n\t            \tthis._errHandler.reportMatch(this);\r\n\t                this.consume();\r\n\t            }\r\n\t            this.state = 109;\r\n\t            localctx.lower = this.factor(0);\r\n\t            this.state = 110;\r\n\t            this.match(NqlParser.COMMA);\r\n\t            this.state = 111;\r\n\t            localctx.upper = this.factor(0);\r\n\t            this.state = 112;\r\n\t            localctx.includeUpper = this._input.LT(1);\r\n\t            _la = this._input.LA(1);\r\n\t            if(!(_la===NqlParser.RP || _la===NqlParser.RB)) {\r\n\t                localctx.includeUpper = this._errHandler.recoverInline(this);\r\n\t            }\r\n\t            else {\r\n\t            \tthis._errHandler.reportMatch(this);\r\n\t                this.consume();\r\n\t            }\r\n\t            this.state = 113;\r\n\t            this.period();\r\n\t            break;\r\n\r\n\t        case 4:\r\n\t            localctx = new HistoricalCollectionMatchExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 4);\r\n\t            this.state = 115;\r\n\t            localctx.value = this.factor(0);\r\n\t            this.state = 116;\r\n\t            this.match(NqlParser.WAS);\r\n\t            this.state = 117;\r\n\t            localctx.op = this.collectionOperator();\r\n\t            this.state = 118;\r\n\t            localctx.collection = this.factor(0);\r\n\t            this.state = 119;\r\n\t            this.period();\r\n\t            break;\r\n\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tcompare() {\r\n\t    let localctx = new CompareContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 10, NqlParser.RULE_compare);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.state = 166;\r\n\t        this._errHandler.sync(this);\r\n\t        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);\r\n\t        switch(la_) {\r\n\t        case 1:\r\n\t            localctx = new ExistsExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 1);\r\n\t            this.state = 123;\r\n\t            this.path();\r\n\t            this.state = 125;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 124;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 127;\r\n\t            this.match(NqlParser.EXISTS);\r\n\t            break;\r\n\r\n\t        case 2:\r\n\t            localctx = new NumericCompareExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 2);\r\n\t            this.state = 129;\r\n\t            localctx.left = this.factor(0);\r\n\t            this.state = 131;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 130;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 133;\r\n\t            localctx.op = this.compareOperator();\r\n\t            this.state = 134;\r\n\t            localctx.right = this.factor(0);\r\n\t            break;\r\n\r\n\t        case 3:\r\n\t            localctx = new StringMatchExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 3);\r\n\t            this.state = 136;\r\n\t            localctx.value = this.factor(0);\r\n\t            this.state = 138;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 137;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 140;\r\n\t            localctx.op = this.stringOperator();\r\n\t            this.state = 141;\r\n\t            localctx.pattern = this.factor(0);\r\n\t            break;\r\n\r\n\t        case 4:\r\n\t            localctx = new BetweenExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 4);\r\n\t            this.state = 143;\r\n\t            localctx.value = this.factor(0);\r\n\t            this.state = 144;\r\n\t            this.match(NqlParser.BETWEEN);\r\n\t            this.state = 145;\r\n\t            localctx.includeLower = this._input.LT(1);\r\n\t            _la = this._input.LA(1);\r\n\t            if(!(_la===NqlParser.LP || _la===NqlParser.LB)) {\r\n\t                localctx.includeLower = this._errHandler.recoverInline(this);\r\n\t            }\r\n\t            else {\r\n\t            \tthis._errHandler.reportMatch(this);\r\n\t                this.consume();\r\n\t            }\r\n\t            this.state = 146;\r\n\t            localctx.lower = this.factor(0);\r\n\t            this.state = 147;\r\n\t            this.match(NqlParser.COMMA);\r\n\t            this.state = 148;\r\n\t            localctx.upper = this.factor(0);\r\n\t            this.state = 149;\r\n\t            localctx.includeUpper = this._input.LT(1);\r\n\t            _la = this._input.LA(1);\r\n\t            if(!(_la===NqlParser.RP || _la===NqlParser.RB)) {\r\n\t                localctx.includeUpper = this._errHandler.recoverInline(this);\r\n\t            }\r\n\t            else {\r\n\t            \tthis._errHandler.reportMatch(this);\r\n\t                this.consume();\r\n\t            }\r\n\t            break;\r\n\r\n\t        case 5:\r\n\t            localctx = new CollectionMatchExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 5);\r\n\t            this.state = 151;\r\n\t            localctx.value = this.factor(0);\r\n\t            this.state = 152;\r\n\t            localctx.op = this.collectionOperator();\r\n\t            this.state = 153;\r\n\t            localctx.collection = this.factor(0);\r\n\t            break;\r\n\r\n\t        case 6:\r\n\t            localctx = new SatisfyExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 6);\r\n\t            this.state = 155;\r\n\t            this.match(NqlParser.ISSUE);\r\n\t            this.state = 157;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 156;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 159;\r\n\t            this.match(NqlParser.IN);\r\n\t            this.state = 160;\r\n\t            this.functionCall();\r\n\t            break;\r\n\r\n\t        case 7:\r\n\t            localctx = new SatisfyExprContext(this, localctx);\r\n\t            this.enterOuterAlt(localctx, 7);\r\n\t            this.state = 162;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            if(_la===NqlParser.NOT) {\r\n\t                this.state = 161;\r\n\t                this.match(NqlParser.NOT);\r\n\t            }\r\n\r\n\t            this.state = 164;\r\n\t            this.match(NqlParser.SATISFY);\r\n\t            this.state = 165;\r\n\t            this.functionCall();\r\n\t            break;\r\n\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\tfactor(_p) {\r\n\t\tif(_p===undefined) {\r\n\t\t    _p = 0;\r\n\t\t}\r\n\t    const _parentctx = this._ctx;\r\n\t    const _parentState = this.state;\r\n\t    let localctx = new FactorContext(this, this._ctx, _parentState);\r\n\t    let _prevctx = localctx;\r\n\t    const _startState = 12;\r\n\t    this.enterRecursionRule(localctx, 12, NqlParser.RULE_factor, _p);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 198;\r\n\t        this._errHandler.sync(this);\r\n\t        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);\r\n\t        switch(la_) {\r\n\t        case 1:\r\n\t            localctx = new RawValueExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\r\n\t            this.state = 169;\r\n\t            this.raw();\r\n\t            break;\r\n\r\n\t        case 2:\r\n\t            localctx = new DurationExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 170;\r\n\t            this.duration();\r\n\t            break;\r\n\r\n\t        case 3:\r\n\t            localctx = new PathExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 171;\r\n\t            this.path();\r\n\t            break;\r\n\r\n\t        case 4:\r\n\t            localctx = new PrecededExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 172;\r\n\t            this.match(NqlParser.LP);\r\n\t            this.state = 173;\r\n\t            localctx.inner = this.factor(0);\r\n\t            this.state = 174;\r\n\t            this.match(NqlParser.RP);\r\n\t            break;\r\n\r\n\t        case 5:\r\n\t            localctx = new FunctionCallExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 176;\r\n\t            this.functionCall();\r\n\t            break;\r\n\r\n\t        case 6:\r\n\t            localctx = new MathNegativeExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 177;\r\n\t            this.match(NqlParser.SUBTRACT);\r\n\t            this.state = 178;\r\n\t            localctx.inner = this.factor(8);\r\n\t            break;\r\n\r\n\t        case 7:\r\n\t            localctx = new ConditionExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 179;\r\n\t            this.match(NqlParser.LP);\r\n\t            this.state = 180;\r\n\t            localctx.condition = this.logic(0);\r\n\t            this.state = 181;\r\n\t            this.match(NqlParser.QUESTION);\r\n\t            this.state = 182;\r\n\t            localctx.pass = this.factor(0);\r\n\t            this.state = 183;\r\n\t            this.match(NqlParser.COLON);\r\n\t            this.state = 184;\r\n\t            localctx.otherwise = this.factor(0);\r\n\t            this.state = 185;\r\n\t            this.match(NqlParser.RP);\r\n\t            break;\r\n\r\n\t        case 8:\r\n\t            localctx = new CommaListExprContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 187;\r\n\t            this.match(NqlParser.LB);\r\n\t            this.state = 188;\r\n\t            localctx._factor = this.factor(0);\r\n\t            localctx.elements.push(localctx._factor);\r\n\t            this.state = 193;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            while(_la===NqlParser.COMMA) {\r\n\t                this.state = 189;\r\n\t                this.match(NqlParser.COMMA);\r\n\t                this.state = 190;\r\n\t                localctx._factor = this.factor(0);\r\n\t                localctx.elements.push(localctx._factor);\r\n\t                this.state = 195;\r\n\t                this._errHandler.sync(this);\r\n\t                _la = this._input.LA(1);\r\n\t            }\r\n\t            this.state = 196;\r\n\t            this.match(NqlParser.RB);\r\n\t            break;\r\n\r\n\t        }\r\n\t        this._ctx.stop = this._input.LT(-1);\r\n\t        this.state = 217;\r\n\t        this._errHandler.sync(this);\r\n\t        let _alt = this._interp.adaptivePredict(this._input,19,this._ctx)\r\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n\t            if(_alt===1) {\r\n\t                if(this._parseListeners!==null) {\r\n\t                    this.triggerExitRuleEvent();\r\n\t                }\r\n\t                _prevctx = localctx;\r\n\t                this.state = 215;\r\n\t                this._errHandler.sync(this);\r\n\t                var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);\r\n\t                switch(la_) {\r\n\t                case 1:\r\n\t                    localctx = new MathBinaryExprContext(this, new FactorContext(this, _parentctx, _parentState));\r\n\t                    localctx.left = _prevctx;\r\n\t                    this.pushNewRecursionContext(localctx, _startState, NqlParser.RULE_factor);\r\n\t                    this.state = 200;\r\n\t                    if (!( this.precpred(this._ctx, 7))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\r\n\t                    }\r\n\t                    this.state = 201;\r\n\t                    localctx.op = this.match(NqlParser.MULTIPLY);\r\n\t                    this.state = 202;\r\n\t                    localctx.right = this.factor(8);\r\n\t                    break;\r\n\r\n\t                case 2:\r\n\t                    localctx = new MathBinaryExprContext(this, new FactorContext(this, _parentctx, _parentState));\r\n\t                    localctx.left = _prevctx;\r\n\t                    this.pushNewRecursionContext(localctx, _startState, NqlParser.RULE_factor);\r\n\t                    this.state = 203;\r\n\t                    if (!( this.precpred(this._ctx, 6))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 6)\");\r\n\t                    }\r\n\t                    this.state = 204;\r\n\t                    localctx.op = this.match(NqlParser.DIVIDE);\r\n\t                    this.state = 205;\r\n\t                    localctx.right = this.factor(7);\r\n\t                    break;\r\n\r\n\t                case 3:\r\n\t                    localctx = new MathBinaryExprContext(this, new FactorContext(this, _parentctx, _parentState));\r\n\t                    localctx.left = _prevctx;\r\n\t                    this.pushNewRecursionContext(localctx, _startState, NqlParser.RULE_factor);\r\n\t                    this.state = 206;\r\n\t                    if (!( this.precpred(this._ctx, 5))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 5)\");\r\n\t                    }\r\n\t                    this.state = 207;\r\n\t                    localctx.op = this.match(NqlParser.MOD);\r\n\t                    this.state = 208;\r\n\t                    localctx.right = this.factor(6);\r\n\t                    break;\r\n\r\n\t                case 4:\r\n\t                    localctx = new MathBinaryExprContext(this, new FactorContext(this, _parentctx, _parentState));\r\n\t                    localctx.left = _prevctx;\r\n\t                    this.pushNewRecursionContext(localctx, _startState, NqlParser.RULE_factor);\r\n\t                    this.state = 209;\r\n\t                    if (!( this.precpred(this._ctx, 4))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 4)\");\r\n\t                    }\r\n\t                    this.state = 210;\r\n\t                    localctx.op = this.match(NqlParser.ADD);\r\n\t                    this.state = 211;\r\n\t                    localctx.right = this.factor(5);\r\n\t                    break;\r\n\r\n\t                case 5:\r\n\t                    localctx = new MathBinaryExprContext(this, new FactorContext(this, _parentctx, _parentState));\r\n\t                    localctx.left = _prevctx;\r\n\t                    this.pushNewRecursionContext(localctx, _startState, NqlParser.RULE_factor);\r\n\t                    this.state = 212;\r\n\t                    if (!( this.precpred(this._ctx, 3))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 3)\");\r\n\t                    }\r\n\t                    this.state = 213;\r\n\t                    localctx.op = this.match(NqlParser.SUBTRACT);\r\n\t                    this.state = 214;\r\n\t                    localctx.right = this.factor(4);\r\n\t                    break;\r\n\r\n\t                } \r\n\t            }\r\n\t            this.state = 219;\r\n\t            this._errHandler.sync(this);\r\n\t            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);\r\n\t        }\r\n\r\n\t    } catch( error) {\r\n\t        if(error instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = error;\r\n\t\t        this._errHandler.reportError(this, error);\r\n\t\t        this._errHandler.recover(this, error);\r\n\t\t    } else {\r\n\t\t    \tthrow error;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.unrollRecursionContexts(_parentctx)\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tfunctionCall() {\r\n\t    let localctx = new FunctionCallContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 14, NqlParser.RULE_functionCall);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 220;\r\n\t        localctx.functionName = this.match(NqlParser.ID);\r\n\t        this.state = 221;\r\n\t        this.match(NqlParser.LP);\r\n\t        this.state = 230;\r\n\t        this._errHandler.sync(this);\r\n\t        _la = this._input.LA(1);\r\n\t        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << NqlParser.LP) | (1 << NqlParser.LB) | (1 << NqlParser.TRUE) | (1 << NqlParser.FALSE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (NqlParser.SUBTRACT - 34)) | (1 << (NqlParser.NULL - 34)) | (1 << (NqlParser.UNSIGN - 34)) | (1 << (NqlParser.DECIMAL - 34)) | (1 << (NqlParser.ID - 34)) | (1 << (NqlParser.KEY - 34)) | (1 << (NqlParser.MILLIS - 34)) | (1 << (NqlParser.SECONDS - 34)) | (1 << (NqlParser.MINUTES - 34)) | (1 << (NqlParser.HOURS - 34)) | (1 << (NqlParser.DAYS - 34)) | (1 << (NqlParser.WEEKS - 34)) | (1 << (NqlParser.DATE - 34)) | (1 << (NqlParser.DATETIME - 34)) | (1 << (NqlParser.STRING - 34)))) !== 0)) {\r\n\t            this.state = 222;\r\n\t            localctx._factor = this.factor(0);\r\n\t            localctx.args.push(localctx._factor);\r\n\t            this.state = 227;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            while(_la===NqlParser.COMMA) {\r\n\t                this.state = 223;\r\n\t                this.match(NqlParser.COMMA);\r\n\t                this.state = 224;\r\n\t                localctx._factor = this.factor(0);\r\n\t                localctx.args.push(localctx._factor);\r\n\t                this.state = 229;\r\n\t                this._errHandler.sync(this);\r\n\t                _la = this._input.LA(1);\r\n\t            }\r\n\t        }\r\n\r\n\t        this.state = 232;\r\n\t        this.match(NqlParser.RP);\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tpath() {\r\n\t    let localctx = new PathContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 16, NqlParser.RULE_path);\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 234;\r\n\t        localctx._pathElement = this.pathElement();\r\n\t        localctx.chain.push(localctx._pathElement);\r\n\t        this.state = 239;\r\n\t        this._errHandler.sync(this);\r\n\t        let _alt = this._interp.adaptivePredict(this._input,22,this._ctx)\r\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n\t            if(_alt===1) {\r\n\t                this.state = 235;\r\n\t                this.match(NqlParser.DOT);\r\n\t                this.state = 236;\r\n\t                localctx._pathElement = this.pathElement();\r\n\t                localctx.chain.push(localctx._pathElement); \r\n\t            }\r\n\t            this.state = 241;\r\n\t            this._errHandler.sync(this);\r\n\t            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);\r\n\t        }\r\n\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tpathElement() {\r\n\t    let localctx = new PathElementContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 18, NqlParser.RULE_pathElement);\r\n\t    try {\r\n\t        this.state = 244;\r\n\t        this._errHandler.sync(this);\r\n\t        switch(this._input.LA(1)) {\r\n\t        case NqlParser.ID:\r\n\t            this.enterOuterAlt(localctx, 1);\r\n\t            this.state = 242;\r\n\t            localctx.id = this.match(NqlParser.ID);\r\n\t            break;\r\n\t        case NqlParser.KEY:\r\n\t            this.enterOuterAlt(localctx, 2);\r\n\t            this.state = 243;\r\n\t            localctx.key = this.match(NqlParser.KEY);\r\n\t            break;\r\n\t        default:\r\n\t            throw new antlr4.error.NoViableAltException(this);\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tduration() {\r\n\t    let localctx = new DurationContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 20, NqlParser.RULE_duration);\r\n\t    try {\r\n\t        this.state = 252;\r\n\t        this._errHandler.sync(this);\r\n\t        switch(this._input.LA(1)) {\r\n\t        case NqlParser.MILLIS:\r\n\t            this.enterOuterAlt(localctx, 1);\r\n\t            this.state = 246;\r\n\t            localctx.amountMillis = this.match(NqlParser.MILLIS);\r\n\t            break;\r\n\t        case NqlParser.SECONDS:\r\n\t            this.enterOuterAlt(localctx, 2);\r\n\t            this.state = 247;\r\n\t            localctx.amountSeconds = this.match(NqlParser.SECONDS);\r\n\t            break;\r\n\t        case NqlParser.MINUTES:\r\n\t            this.enterOuterAlt(localctx, 3);\r\n\t            this.state = 248;\r\n\t            localctx.amountMinutes = this.match(NqlParser.MINUTES);\r\n\t            break;\r\n\t        case NqlParser.HOURS:\r\n\t            this.enterOuterAlt(localctx, 4);\r\n\t            this.state = 249;\r\n\t            localctx.amountHours = this.match(NqlParser.HOURS);\r\n\t            break;\r\n\t        case NqlParser.DAYS:\r\n\t            this.enterOuterAlt(localctx, 5);\r\n\t            this.state = 250;\r\n\t            localctx.amountDays = this.match(NqlParser.DAYS);\r\n\t            break;\r\n\t        case NqlParser.WEEKS:\r\n\t            this.enterOuterAlt(localctx, 6);\r\n\t            this.state = 251;\r\n\t            localctx.amountWeeks = this.match(NqlParser.WEEKS);\r\n\t            break;\r\n\t        default:\r\n\t            throw new antlr4.error.NoViableAltException(this);\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\traw() {\r\n\t    let localctx = new RawContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 22, NqlParser.RULE_raw);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 254;\r\n\t        _la = this._input.LA(1);\r\n\t        if(!(_la===NqlParser.TRUE || _la===NqlParser.FALSE || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (NqlParser.NULL - 38)) | (1 << (NqlParser.UNSIGN - 38)) | (1 << (NqlParser.DECIMAL - 38)) | (1 << (NqlParser.DATE - 38)) | (1 << (NqlParser.DATETIME - 38)) | (1 << (NqlParser.STRING - 38)))) !== 0))) {\r\n\t        this._errHandler.recoverInline(this);\r\n\t        }\r\n\t        else {\r\n\t        \tthis._errHandler.reportMatch(this);\r\n\t            this.consume();\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tsortDirection() {\r\n\t    let localctx = new SortDirectionContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 24, NqlParser.RULE_sortDirection);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 256;\r\n\t        _la = this._input.LA(1);\r\n\t        if(!(_la===NqlParser.ASC || _la===NqlParser.DESC)) {\r\n\t        this._errHandler.recoverInline(this);\r\n\t        }\r\n\t        else {\r\n\t        \tthis._errHandler.reportMatch(this);\r\n\t            this.consume();\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tstringOperator() {\r\n\t    let localctx = new StringOperatorContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 26, NqlParser.RULE_stringOperator);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 258;\r\n\t        _la = this._input.LA(1);\r\n\t        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << NqlParser.REGEX_MATCH) | (1 << NqlParser.MATCH) | (1 << NqlParser.EXACTLY_MATCH))) !== 0))) {\r\n\t        this._errHandler.recoverInline(this);\r\n\t        }\r\n\t        else {\r\n\t        \tthis._errHandler.reportMatch(this);\r\n\t            this.consume();\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tcollectionOperator() {\r\n\t    let localctx = new CollectionOperatorContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 28, NqlParser.RULE_collectionOperator);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 260;\r\n\t        _la = this._input.LA(1);\r\n\t        if(!(_la===NqlParser.IN || _la===NqlParser.NOT_IN)) {\r\n\t        this._errHandler.recoverInline(this);\r\n\t        }\r\n\t        else {\r\n\t        \tthis._errHandler.reportMatch(this);\r\n\t            this.consume();\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tcompareOperator() {\r\n\t    let localctx = new CompareOperatorContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 30, NqlParser.RULE_compareOperator);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 262;\r\n\t        _la = this._input.LA(1);\r\n\t        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << NqlParser.EQUALS) | (1 << NqlParser.NOT_EQUALS) | (1 << NqlParser.GREATER) | (1 << NqlParser.LESS) | (1 << NqlParser.GREATER_EQUALS) | (1 << NqlParser.LESS_EQUALS))) !== 0))) {\r\n\t        this._errHandler.recoverInline(this);\r\n\t        }\r\n\t        else {\r\n\t        \tthis._errHandler.reportMatch(this);\r\n\t            this.consume();\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tlogicBinaryOp() {\r\n\t    let localctx = new LogicBinaryOpContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 32, NqlParser.RULE_logicBinaryOp);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 264;\r\n\t        _la = this._input.LA(1);\r\n\t        if(!(_la===NqlParser.AND || _la===NqlParser.OR)) {\r\n\t        this._errHandler.recoverInline(this);\r\n\t        }\r\n\t        else {\r\n\t        \tthis._errHandler.reportMatch(this);\r\n\t            this.consume();\r\n\t        }\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.EOF = antlr4.Token.EOF;\r\nNqlParser.UNDERSCORE = 1;\r\nNqlParser.LP = 2;\r\nNqlParser.RP = 3;\r\nNqlParser.LB = 4;\r\nNqlParser.RB = 5;\r\nNqlParser.PIPE = 6;\r\nNqlParser.QUESTION = 7;\r\nNqlParser.COLON = 8;\r\nNqlParser.SEMI_COLON = 9;\r\nNqlParser.DOT = 10;\r\nNqlParser.COMMA = 11;\r\nNqlParser.AS = 12;\r\nNqlParser.TRUE = 13;\r\nNqlParser.FALSE = 14;\r\nNqlParser.BETWEEN = 15;\r\nNqlParser.EQUALS = 16;\r\nNqlParser.NOT_EQUALS = 17;\r\nNqlParser.GREATER = 18;\r\nNqlParser.LESS = 19;\r\nNqlParser.GREATER_EQUALS = 20;\r\nNqlParser.LESS_EQUALS = 21;\r\nNqlParser.REGEX_MATCH = 22;\r\nNqlParser.MATCH = 23;\r\nNqlParser.EXACTLY_MATCH = 24;\r\nNqlParser.WAS = 25;\r\nNqlParser.DURING = 26;\r\nNqlParser.BEFORE = 27;\r\nNqlParser.AFTER = 28;\r\nNqlParser.NOT = 29;\r\nNqlParser.AND = 30;\r\nNqlParser.OR = 31;\r\nNqlParser.XOR = 32;\r\nNqlParser.ADD = 33;\r\nNqlParser.SUBTRACT = 34;\r\nNqlParser.MULTIPLY = 35;\r\nNqlParser.DIVIDE = 36;\r\nNqlParser.MOD = 37;\r\nNqlParser.NULL = 38;\r\nNqlParser.IN = 39;\r\nNqlParser.NOT_IN = 40;\r\nNqlParser.ORDERBY = 41;\r\nNqlParser.ASC = 42;\r\nNqlParser.DESC = 43;\r\nNqlParser.ISSUE = 44;\r\nNqlParser.SATISFY = 45;\r\nNqlParser.EXISTS = 46;\r\nNqlParser.UNSIGN = 47;\r\nNqlParser.DECIMAL = 48;\r\nNqlParser.ID = 49;\r\nNqlParser.KEY = 50;\r\nNqlParser.MILLIS = 51;\r\nNqlParser.SECONDS = 52;\r\nNqlParser.MINUTES = 53;\r\nNqlParser.HOURS = 54;\r\nNqlParser.DAYS = 55;\r\nNqlParser.WEEKS = 56;\r\nNqlParser.DATE = 57;\r\nNqlParser.DATETIME = 58;\r\nNqlParser.STRING = 59;\r\nNqlParser.WS = 60;\r\n\r\nNqlParser.RULE_query = 0;\r\nNqlParser.RULE_sortTuple = 1;\r\nNqlParser.RULE_logic = 2;\r\nNqlParser.RULE_period = 3;\r\nNqlParser.RULE_historicalCompare = 4;\r\nNqlParser.RULE_compare = 5;\r\nNqlParser.RULE_factor = 6;\r\nNqlParser.RULE_functionCall = 7;\r\nNqlParser.RULE_path = 8;\r\nNqlParser.RULE_pathElement = 9;\r\nNqlParser.RULE_duration = 10;\r\nNqlParser.RULE_raw = 11;\r\nNqlParser.RULE_sortDirection = 12;\r\nNqlParser.RULE_stringOperator = 13;\r\nNqlParser.RULE_collectionOperator = 14;\r\nNqlParser.RULE_compareOperator = 15;\r\nNqlParser.RULE_logicBinaryOp = 16;\r\n\r\nclass QueryContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_query;\r\n        this._sortTuple = null; // SortTupleContext\r\n        this.sortTuples = []; // of SortTupleContexts\r\n    }\r\n\r\n\tlogic() {\r\n\t    return this.getTypedRuleContext(LogicContext,0);\r\n\t};\r\n\r\n\tORDERBY() {\r\n\t    return this.getToken(NqlParser.ORDERBY, 0);\r\n\t};\r\n\r\n\tsortTuple = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(SortTupleContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(SortTupleContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tCOMMA = function(i) {\r\n\t\tif(i===undefined) {\r\n\t\t\ti = null;\r\n\t\t}\r\n\t    if(i===null) {\r\n\t        return this.getTokens(NqlParser.COMMA);\r\n\t    } else {\r\n\t        return this.getToken(NqlParser.COMMA, i);\r\n\t    }\r\n\t};\r\n\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterQuery(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitQuery(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass SortTupleContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_sortTuple;\r\n    }\r\n\r\n\tpath() {\r\n\t    return this.getTypedRuleContext(PathContext,0);\r\n\t};\r\n\r\n\tsortDirection() {\r\n\t    return this.getTypedRuleContext(SortDirectionContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterSortTuple(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitSortTuple(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass LogicContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_logic;\r\n    }\r\n\r\n\r\n\t \r\n\t\tcopyFrom(ctx) {\r\n\t\t\tsuper.copyFrom(ctx);\r\n\t\t}\r\n\r\n}\r\n\r\n\r\nclass LogicPrecededExprContext extends LogicContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.inner = null; // LogicContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tLP() {\r\n\t    return this.getToken(NqlParser.LP, 0);\r\n\t};\r\n\r\n\tRP() {\r\n\t    return this.getToken(NqlParser.RP, 0);\r\n\t};\r\n\r\n\tlogic() {\r\n\t    return this.getTypedRuleContext(LogicContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterLogicPrecededExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitLogicPrecededExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.LogicPrecededExprContext = LogicPrecededExprContext;\r\n\r\nclass LogicHistoricalCompareExprContext extends LogicContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\thistoricalCompare() {\r\n\t    return this.getTypedRuleContext(HistoricalCompareContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterLogicHistoricalCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitLogicHistoricalCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.LogicHistoricalCompareExprContext = LogicHistoricalCompareExprContext;\r\n\r\nclass LogicCompareExprContext extends LogicContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tcompare() {\r\n\t    return this.getTypedRuleContext(CompareContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterLogicCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitLogicCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.LogicCompareExprContext = LogicCompareExprContext;\r\n\r\nclass LogicBinaryExprContext extends LogicContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.left = null; // LogicContext;\r\n        this.op = null; // LogicBinaryOpContext;\r\n        this.right = null; // LogicContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tlogic = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(LogicContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(LogicContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tlogicBinaryOp() {\r\n\t    return this.getTypedRuleContext(LogicBinaryOpContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterLogicBinaryExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitLogicBinaryExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.LogicBinaryExprContext = LogicBinaryExprContext;\r\n\r\nclass LogicNotExprContext extends LogicContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.inner = null; // LogicContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tlogic() {\r\n\t    return this.getTypedRuleContext(LogicContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterLogicNotExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitLogicNotExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.LogicNotExprContext = LogicNotExprContext;\r\n\r\nclass PeriodContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_period;\r\n        this.from = null; // FactorContext\r\n        this.to = null; // FactorContext\r\n    }\r\n\r\n\tBEFORE() {\r\n\t    return this.getToken(NqlParser.BEFORE, 0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tAFTER() {\r\n\t    return this.getToken(NqlParser.AFTER, 0);\r\n\t};\r\n\r\n\tDURING() {\r\n\t    return this.getToken(NqlParser.DURING, 0);\r\n\t};\r\n\r\n\tLP() {\r\n\t    return this.getToken(NqlParser.LP, 0);\r\n\t};\r\n\r\n\tCOMMA() {\r\n\t    return this.getToken(NqlParser.COMMA, 0);\r\n\t};\r\n\r\n\tRP() {\r\n\t    return this.getToken(NqlParser.RP, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterPeriod(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitPeriod(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass HistoricalCompareContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_historicalCompare;\r\n    }\r\n\r\n\r\n\t \r\n\t\tcopyFrom(ctx) {\r\n\t\t\tsuper.copyFrom(ctx);\r\n\t\t}\r\n\r\n}\r\n\r\n\r\nclass HistoricalStringMatchExprContext extends HistoricalCompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.value = null; // FactorContext;\r\n        this.op = null; // StringOperatorContext;\r\n        this.pattern = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tWAS() {\r\n\t    return this.getToken(NqlParser.WAS, 0);\r\n\t};\r\n\r\n\tperiod() {\r\n\t    return this.getTypedRuleContext(PeriodContext,0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tstringOperator() {\r\n\t    return this.getTypedRuleContext(StringOperatorContext,0);\r\n\t};\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterHistoricalStringMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitHistoricalStringMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.HistoricalStringMatchExprContext = HistoricalStringMatchExprContext;\r\n\r\nclass HistoricalBetweenExprContext extends HistoricalCompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.value = null; // FactorContext;\r\n        this.includeLower = null; // Token;\r\n        this.lower = null; // FactorContext;\r\n        this.upper = null; // FactorContext;\r\n        this.includeUpper = null; // Token;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tWAS() {\r\n\t    return this.getToken(NqlParser.WAS, 0);\r\n\t};\r\n\r\n\tBETWEEN() {\r\n\t    return this.getToken(NqlParser.BETWEEN, 0);\r\n\t};\r\n\r\n\tCOMMA() {\r\n\t    return this.getToken(NqlParser.COMMA, 0);\r\n\t};\r\n\r\n\tperiod() {\r\n\t    return this.getTypedRuleContext(PeriodContext,0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tLP() {\r\n\t    return this.getToken(NqlParser.LP, 0);\r\n\t};\r\n\r\n\tLB() {\r\n\t    return this.getToken(NqlParser.LB, 0);\r\n\t};\r\n\r\n\tRP() {\r\n\t    return this.getToken(NqlParser.RP, 0);\r\n\t};\r\n\r\n\tRB() {\r\n\t    return this.getToken(NqlParser.RB, 0);\r\n\t};\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterHistoricalBetweenExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitHistoricalBetweenExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.HistoricalBetweenExprContext = HistoricalBetweenExprContext;\r\n\r\nclass HistoricalNumericCompareExprContext extends HistoricalCompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.left = null; // FactorContext;\r\n        this.op = null; // CompareOperatorContext;\r\n        this.right = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tWAS() {\r\n\t    return this.getToken(NqlParser.WAS, 0);\r\n\t};\r\n\r\n\tperiod() {\r\n\t    return this.getTypedRuleContext(PeriodContext,0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tcompareOperator() {\r\n\t    return this.getTypedRuleContext(CompareOperatorContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterHistoricalNumericCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitHistoricalNumericCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.HistoricalNumericCompareExprContext = HistoricalNumericCompareExprContext;\r\n\r\nclass HistoricalCollectionMatchExprContext extends HistoricalCompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.value = null; // FactorContext;\r\n        this.op = null; // CollectionOperatorContext;\r\n        this.collection = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tWAS() {\r\n\t    return this.getToken(NqlParser.WAS, 0);\r\n\t};\r\n\r\n\tperiod() {\r\n\t    return this.getTypedRuleContext(PeriodContext,0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tcollectionOperator() {\r\n\t    return this.getTypedRuleContext(CollectionOperatorContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterHistoricalCollectionMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitHistoricalCollectionMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.HistoricalCollectionMatchExprContext = HistoricalCollectionMatchExprContext;\r\n\r\nclass CompareContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_compare;\r\n    }\r\n\r\n\r\n\t \r\n\t\tcopyFrom(ctx) {\r\n\t\t\tsuper.copyFrom(ctx);\r\n\t\t}\r\n\r\n}\r\n\r\n\r\nclass StringMatchExprContext extends CompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.value = null; // FactorContext;\r\n        this.op = null; // StringOperatorContext;\r\n        this.pattern = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tstringOperator() {\r\n\t    return this.getTypedRuleContext(StringOperatorContext,0);\r\n\t};\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterStringMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitStringMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.StringMatchExprContext = StringMatchExprContext;\r\n\r\nclass CollectionMatchExprContext extends CompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.value = null; // FactorContext;\r\n        this.op = null; // CollectionOperatorContext;\r\n        this.collection = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tcollectionOperator() {\r\n\t    return this.getTypedRuleContext(CollectionOperatorContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterCollectionMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitCollectionMatchExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.CollectionMatchExprContext = CollectionMatchExprContext;\r\n\r\nclass SatisfyExprContext extends CompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tISSUE() {\r\n\t    return this.getToken(NqlParser.ISSUE, 0);\r\n\t};\r\n\r\n\tIN() {\r\n\t    return this.getToken(NqlParser.IN, 0);\r\n\t};\r\n\r\n\tfunctionCall() {\r\n\t    return this.getTypedRuleContext(FunctionCallContext,0);\r\n\t};\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tSATISFY() {\r\n\t    return this.getToken(NqlParser.SATISFY, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterSatisfyExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitSatisfyExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.SatisfyExprContext = SatisfyExprContext;\r\n\r\nclass ExistsExprContext extends CompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tpath() {\r\n\t    return this.getTypedRuleContext(PathContext,0);\r\n\t};\r\n\r\n\tEXISTS() {\r\n\t    return this.getToken(NqlParser.EXISTS, 0);\r\n\t};\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterExistsExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitExistsExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.ExistsExprContext = ExistsExprContext;\r\n\r\nclass NumericCompareExprContext extends CompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.left = null; // FactorContext;\r\n        this.op = null; // CompareOperatorContext;\r\n        this.right = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tcompareOperator() {\r\n\t    return this.getTypedRuleContext(CompareOperatorContext,0);\r\n\t};\r\n\r\n\tNOT() {\r\n\t    return this.getToken(NqlParser.NOT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterNumericCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitNumericCompareExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.NumericCompareExprContext = NumericCompareExprContext;\r\n\r\nclass BetweenExprContext extends CompareContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.value = null; // FactorContext;\r\n        this.includeLower = null; // Token;\r\n        this.lower = null; // FactorContext;\r\n        this.upper = null; // FactorContext;\r\n        this.includeUpper = null; // Token;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tBETWEEN() {\r\n\t    return this.getToken(NqlParser.BETWEEN, 0);\r\n\t};\r\n\r\n\tCOMMA() {\r\n\t    return this.getToken(NqlParser.COMMA, 0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tLP() {\r\n\t    return this.getToken(NqlParser.LP, 0);\r\n\t};\r\n\r\n\tLB() {\r\n\t    return this.getToken(NqlParser.LB, 0);\r\n\t};\r\n\r\n\tRP() {\r\n\t    return this.getToken(NqlParser.RP, 0);\r\n\t};\r\n\r\n\tRB() {\r\n\t    return this.getToken(NqlParser.RB, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterBetweenExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitBetweenExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.BetweenExprContext = BetweenExprContext;\r\n\r\nclass FactorContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_factor;\r\n    }\r\n\r\n\r\n\t \r\n\t\tcopyFrom(ctx) {\r\n\t\t\tsuper.copyFrom(ctx);\r\n\t\t}\r\n\r\n}\r\n\r\n\r\nclass RawValueExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\traw() {\r\n\t    return this.getTypedRuleContext(RawContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterRawValueExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitRawValueExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.RawValueExprContext = RawValueExprContext;\r\n\r\nclass PrecededExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.inner = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tLP() {\r\n\t    return this.getToken(NqlParser.LP, 0);\r\n\t};\r\n\r\n\tRP() {\r\n\t    return this.getToken(NqlParser.RP, 0);\r\n\t};\r\n\r\n\tfactor() {\r\n\t    return this.getTypedRuleContext(FactorContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterPrecededExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitPrecededExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.PrecededExprContext = PrecededExprContext;\r\n\r\nclass MathNegativeExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.inner = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tSUBTRACT() {\r\n\t    return this.getToken(NqlParser.SUBTRACT, 0);\r\n\t};\r\n\r\n\tfactor() {\r\n\t    return this.getTypedRuleContext(FactorContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterMathNegativeExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitMathNegativeExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.MathNegativeExprContext = MathNegativeExprContext;\r\n\r\nclass MathBinaryExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.left = null; // FactorContext;\r\n        this.op = null; // Token;\r\n        this.right = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tMULTIPLY() {\r\n\t    return this.getToken(NqlParser.MULTIPLY, 0);\r\n\t};\r\n\r\n\tDIVIDE() {\r\n\t    return this.getToken(NqlParser.DIVIDE, 0);\r\n\t};\r\n\r\n\tMOD() {\r\n\t    return this.getToken(NqlParser.MOD, 0);\r\n\t};\r\n\r\n\tADD() {\r\n\t    return this.getToken(NqlParser.ADD, 0);\r\n\t};\r\n\r\n\tSUBTRACT() {\r\n\t    return this.getToken(NqlParser.SUBTRACT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterMathBinaryExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitMathBinaryExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.MathBinaryExprContext = MathBinaryExprContext;\r\n\r\nclass DurationExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tduration() {\r\n\t    return this.getTypedRuleContext(DurationContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterDurationExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitDurationExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.DurationExprContext = DurationExprContext;\r\n\r\nclass PathExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tpath() {\r\n\t    return this.getTypedRuleContext(PathContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterPathExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitPathExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.PathExprContext = PathExprContext;\r\n\r\nclass CommaListExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this._factor = null; // FactorContext;\r\n        this.elements = []; // of FactorContexts;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tLB() {\r\n\t    return this.getToken(NqlParser.LB, 0);\r\n\t};\r\n\r\n\tRB() {\r\n\t    return this.getToken(NqlParser.RB, 0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tCOMMA = function(i) {\r\n\t\tif(i===undefined) {\r\n\t\t\ti = null;\r\n\t\t}\r\n\t    if(i===null) {\r\n\t        return this.getTokens(NqlParser.COMMA);\r\n\t    } else {\r\n\t        return this.getToken(NqlParser.COMMA, i);\r\n\t    }\r\n\t};\r\n\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterCommaListExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitCommaListExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.CommaListExprContext = CommaListExprContext;\r\n\r\nclass FunctionCallExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tfunctionCall() {\r\n\t    return this.getTypedRuleContext(FunctionCallContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterFunctionCallExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitFunctionCallExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.FunctionCallExprContext = FunctionCallExprContext;\r\n\r\nclass ConditionExprContext extends FactorContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        this.condition = null; // LogicContext;\r\n        this.pass = null; // FactorContext;\r\n        this.otherwise = null; // FactorContext;\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tLP() {\r\n\t    return this.getToken(NqlParser.LP, 0);\r\n\t};\r\n\r\n\tQUESTION() {\r\n\t    return this.getToken(NqlParser.QUESTION, 0);\r\n\t};\r\n\r\n\tCOLON() {\r\n\t    return this.getToken(NqlParser.COLON, 0);\r\n\t};\r\n\r\n\tRP() {\r\n\t    return this.getToken(NqlParser.RP, 0);\r\n\t};\r\n\r\n\tlogic() {\r\n\t    return this.getTypedRuleContext(LogicContext,0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterConditionExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitConditionExpr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nNqlParser.ConditionExprContext = ConditionExprContext;\r\n\r\nclass FunctionCallContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_functionCall;\r\n        this.functionName = null; // Token\r\n        this._factor = null; // FactorContext\r\n        this.args = []; // of FactorContexts\r\n    }\r\n\r\n\tLP() {\r\n\t    return this.getToken(NqlParser.LP, 0);\r\n\t};\r\n\r\n\tRP() {\r\n\t    return this.getToken(NqlParser.RP, 0);\r\n\t};\r\n\r\n\tID() {\r\n\t    return this.getToken(NqlParser.ID, 0);\r\n\t};\r\n\r\n\tfactor = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(FactorContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(FactorContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tCOMMA = function(i) {\r\n\t\tif(i===undefined) {\r\n\t\t\ti = null;\r\n\t\t}\r\n\t    if(i===null) {\r\n\t        return this.getTokens(NqlParser.COMMA);\r\n\t    } else {\r\n\t        return this.getToken(NqlParser.COMMA, i);\r\n\t    }\r\n\t};\r\n\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterFunctionCall(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitFunctionCall(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass PathContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_path;\r\n        this._pathElement = null; // PathElementContext\r\n        this.chain = []; // of PathElementContexts\r\n    }\r\n\r\n\tpathElement = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(PathElementContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(PathElementContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tDOT = function(i) {\r\n\t\tif(i===undefined) {\r\n\t\t\ti = null;\r\n\t\t}\r\n\t    if(i===null) {\r\n\t        return this.getTokens(NqlParser.DOT);\r\n\t    } else {\r\n\t        return this.getToken(NqlParser.DOT, i);\r\n\t    }\r\n\t};\r\n\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterPath(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitPath(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass PathElementContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_pathElement;\r\n        this.id = null; // Token\r\n        this.key = null; // Token\r\n    }\r\n\r\n\tID() {\r\n\t    return this.getToken(NqlParser.ID, 0);\r\n\t};\r\n\r\n\tKEY() {\r\n\t    return this.getToken(NqlParser.KEY, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterPathElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitPathElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass DurationContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_duration;\r\n        this.amountMillis = null; // Token\r\n        this.amountSeconds = null; // Token\r\n        this.amountMinutes = null; // Token\r\n        this.amountHours = null; // Token\r\n        this.amountDays = null; // Token\r\n        this.amountWeeks = null; // Token\r\n    }\r\n\r\n\tMILLIS() {\r\n\t    return this.getToken(NqlParser.MILLIS, 0);\r\n\t};\r\n\r\n\tSECONDS() {\r\n\t    return this.getToken(NqlParser.SECONDS, 0);\r\n\t};\r\n\r\n\tMINUTES() {\r\n\t    return this.getToken(NqlParser.MINUTES, 0);\r\n\t};\r\n\r\n\tHOURS() {\r\n\t    return this.getToken(NqlParser.HOURS, 0);\r\n\t};\r\n\r\n\tDAYS() {\r\n\t    return this.getToken(NqlParser.DAYS, 0);\r\n\t};\r\n\r\n\tWEEKS() {\r\n\t    return this.getToken(NqlParser.WEEKS, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterDuration(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitDuration(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass RawContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_raw;\r\n    }\r\n\r\n\tNULL() {\r\n\t    return this.getToken(NqlParser.NULL, 0);\r\n\t};\r\n\r\n\tTRUE() {\r\n\t    return this.getToken(NqlParser.TRUE, 0);\r\n\t};\r\n\r\n\tFALSE() {\r\n\t    return this.getToken(NqlParser.FALSE, 0);\r\n\t};\r\n\r\n\tUNSIGN() {\r\n\t    return this.getToken(NqlParser.UNSIGN, 0);\r\n\t};\r\n\r\n\tDECIMAL() {\r\n\t    return this.getToken(NqlParser.DECIMAL, 0);\r\n\t};\r\n\r\n\tSTRING() {\r\n\t    return this.getToken(NqlParser.STRING, 0);\r\n\t};\r\n\r\n\tDATE() {\r\n\t    return this.getToken(NqlParser.DATE, 0);\r\n\t};\r\n\r\n\tDATETIME() {\r\n\t    return this.getToken(NqlParser.DATETIME, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterRaw(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitRaw(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass SortDirectionContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_sortDirection;\r\n    }\r\n\r\n\tASC() {\r\n\t    return this.getToken(NqlParser.ASC, 0);\r\n\t};\r\n\r\n\tDESC() {\r\n\t    return this.getToken(NqlParser.DESC, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterSortDirection(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitSortDirection(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass StringOperatorContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_stringOperator;\r\n    }\r\n\r\n\tMATCH() {\r\n\t    return this.getToken(NqlParser.MATCH, 0);\r\n\t};\r\n\r\n\tEXACTLY_MATCH() {\r\n\t    return this.getToken(NqlParser.EXACTLY_MATCH, 0);\r\n\t};\r\n\r\n\tREGEX_MATCH() {\r\n\t    return this.getToken(NqlParser.REGEX_MATCH, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterStringOperator(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitStringOperator(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass CollectionOperatorContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_collectionOperator;\r\n    }\r\n\r\n\tIN() {\r\n\t    return this.getToken(NqlParser.IN, 0);\r\n\t};\r\n\r\n\tNOT_IN() {\r\n\t    return this.getToken(NqlParser.NOT_IN, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterCollectionOperator(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitCollectionOperator(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass CompareOperatorContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_compareOperator;\r\n    }\r\n\r\n\tEQUALS() {\r\n\t    return this.getToken(NqlParser.EQUALS, 0);\r\n\t};\r\n\r\n\tNOT_EQUALS() {\r\n\t    return this.getToken(NqlParser.NOT_EQUALS, 0);\r\n\t};\r\n\r\n\tGREATER() {\r\n\t    return this.getToken(NqlParser.GREATER, 0);\r\n\t};\r\n\r\n\tGREATER_EQUALS() {\r\n\t    return this.getToken(NqlParser.GREATER_EQUALS, 0);\r\n\t};\r\n\r\n\tLESS() {\r\n\t    return this.getToken(NqlParser.LESS, 0);\r\n\t};\r\n\r\n\tLESS_EQUALS() {\r\n\t    return this.getToken(NqlParser.LESS_EQUALS, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterCompareOperator(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitCompareOperator(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass LogicBinaryOpContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = NqlParser.RULE_logicBinaryOp;\r\n    }\r\n\r\n\tAND() {\r\n\t    return this.getToken(NqlParser.AND, 0);\r\n\t};\r\n\r\n\tOR() {\r\n\t    return this.getToken(NqlParser.OR, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.enterLogicBinaryOp(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof NqlParserListener ) {\r\n\t        listener.exitLogicBinaryOp(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nNqlParser.QueryContext = QueryContext; \r\nNqlParser.SortTupleContext = SortTupleContext; \r\nNqlParser.LogicContext = LogicContext; \r\nNqlParser.PeriodContext = PeriodContext; \r\nNqlParser.HistoricalCompareContext = HistoricalCompareContext; \r\nNqlParser.CompareContext = CompareContext; \r\nNqlParser.FactorContext = FactorContext; \r\nNqlParser.FunctionCallContext = FunctionCallContext; \r\nNqlParser.PathContext = PathContext; \r\nNqlParser.PathElementContext = PathElementContext; \r\nNqlParser.DurationContext = DurationContext; \r\nNqlParser.RawContext = RawContext; \r\nNqlParser.SortDirectionContext = SortDirectionContext; \r\nNqlParser.StringOperatorContext = StringOperatorContext; \r\nNqlParser.CollectionOperatorContext = CollectionOperatorContext; \r\nNqlParser.CompareOperatorContext = CompareOperatorContext; \r\nNqlParser.LogicBinaryOpContext = LogicBinaryOpContext; \r\n","D:\\ANTLR\\antlr\\src\\Grammar\\NqlLexer.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"// Generated from NqlLexer.g4 by ANTLR 4.9\r\n// jshint ignore: start\r\nimport antlr4 from 'antlr4';\r\n\r\n\r\n\r\nconst serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\",\r\n    \"\\u5964\\u0002>\\u034b\\b\\u0001\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\",\r\n    \"\\u0004\\u0004\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\",\r\n    \"\\t\\u0007\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0004\\u000b\\t\\u000b\\u0004\",\r\n    \"\\f\\t\\f\\u0004\\r\\t\\r\\u0004\\u000e\\t\\u000e\\u0004\\u000f\\t\\u000f\\u0004\\u0010\",\r\n    \"\\t\\u0010\\u0004\\u0011\\t\\u0011\\u0004\\u0012\\t\\u0012\\u0004\\u0013\\t\\u0013\",\r\n    \"\\u0004\\u0014\\t\\u0014\\u0004\\u0015\\t\\u0015\\u0004\\u0016\\t\\u0016\\u0004\\u0017\",\r\n    \"\\t\\u0017\\u0004\\u0018\\t\\u0018\\u0004\\u0019\\t\\u0019\\u0004\\u001a\\t\\u001a\",\r\n    \"\\u0004\\u001b\\t\\u001b\\u0004\\u001c\\t\\u001c\\u0004\\u001d\\t\\u001d\\u0004\\u001e\",\r\n    \"\\t\\u001e\\u0004\\u001f\\t\\u001f\\u0004 \\t \\u0004!\\t!\\u0004\\\"\\t\\\"\\u0004#\",\r\n    \"\\t#\\u0004$\\t$\\u0004%\\t%\\u0004&\\t&\\u0004\\'\\t\\'\\u0004(\\t(\\u0004)\\t)\\u0004\",\r\n    \"*\\t*\\u0004+\\t+\\u0004,\\t,\\u0004-\\t-\\u0004.\\t.\\u0004/\\t/\\u00040\\t0\\u0004\",\r\n    \"1\\t1\\u00042\\t2\\u00043\\t3\\u00044\\t4\\u00045\\t5\\u00046\\t6\\u00047\\t7\\u0004\",\r\n    \"8\\t8\\u00049\\t9\\u0004:\\t:\\u0004;\\t;\\u0004<\\t<\\u0004=\\t=\\u0004>\\t>\\u0004\",\r\n    \"?\\t?\\u0004@\\t@\\u0004A\\tA\\u0004B\\tB\\u0004C\\tC\\u0004D\\tD\\u0004E\\tE\\u0004\",\r\n    \"F\\tF\\u0003\\u0002\\u0003\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0005\\u0003\\u0005\\u0003\",\r\n    \"\\u0005\\u0003\\u0005\\u0005\\u0005\\u009b\\n\\u0005\\u0003\\u0006\\u0003\\u0006\",\r\n    \"\\u0003\\u0006\\u0003\\u0006\\u0005\\u0006\\u00a1\\n\\u0006\\u0003\\u0007\\u0003\",\r\n    \"\\u0007\\u0003\\u0007\\u0003\\u0007\\u0005\\u0007\\u00a7\\n\\u0007\\u0003\\b\\u0003\",\r\n    \"\\b\\u0003\\b\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0005\",\r\n    \"\\t\\u00b3\\n\\t\\u0003\\n\\u0003\\n\\u0005\\n\\u00b7\\n\\n\\u0003\\n\\u0006\\n\\u00ba\",\r\n    \"\\n\\n\\r\\n\\u000e\\n\\u00bb\\u0003\\u000b\\u0003\\u000b\\u0003\\f\\u0003\\f\\u0003\",\r\n    \"\\r\\u0003\\r\\u0003\\u000e\\u0003\\u000e\\u0003\\u000f\\u0003\\u000f\\u0003\\u0010\",\r\n    \"\\u0003\\u0010\\u0003\\u0011\\u0003\\u0011\\u0003\\u0012\\u0003\\u0012\\u0003\\u0013\",\r\n    \"\\u0003\\u0013\\u0003\\u0014\\u0003\\u0014\\u0003\\u0015\\u0003\\u0015\\u0003\\u0016\",\r\n    \"\\u0003\\u0016\\u0003\\u0016\\u0003\\u0016\\u0005\\u0016\\u00d8\\n\\u0016\\u0003\",\r\n    \"\\u0017\\u0003\\u0017\\u0003\\u0017\\u0003\\u0017\\u0003\\u0017\\u0003\\u0017\\u0003\",\r\n    \"\\u0017\\u0003\\u0017\\u0005\\u0017\\u00e2\\n\\u0017\\u0003\\u0018\\u0003\\u0018\",\r\n    \"\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\",\r\n    \"\\u0003\\u0018\\u0003\\u0018\\u0005\\u0018\\u00ee\\n\\u0018\\u0003\\u0019\\u0003\",\r\n    \"\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\",\r\n    \"\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\",\r\n    \"\\u0019\\u0005\\u0019\\u00fe\\n\\u0019\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\",\r\n    \"\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\",\r\n    \"\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\",\r\n    \"\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0005\\u001a\\u0113\\n\",\r\n    \"\\u001a\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\",\r\n    \"\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\",\r\n    \"\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\",\r\n    \"\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\",\r\n    \"\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0005\\u001b\\u0131\",\r\n    \"\\n\\u001b\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\",\r\n    \"\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\",\r\n    \"\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\",\r\n    \"\\u0003\\u001c\\u0003\\u001c\\u0005\\u001c\\u0146\\n\\u001c\\u0003\\u001d\\u0003\",\r\n    \"\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\",\r\n    \"\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\",\r\n    \"\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\",\r\n    \"\\u001d\\u0003\\u001d\\u0003\\u001d\\u0003\\u001d\\u0005\\u001d\\u015f\\n\\u001d\",\r\n    \"\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\",\r\n    \"\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\",\r\n    \"\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\",\r\n    \"\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\",\r\n    \"\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\",\r\n    \"\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\",\r\n    \"\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\\u0003\\u001e\",\r\n    \"\\u0005\\u001e\\u018b\\n\\u001e\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\",\r\n    \"\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\",\r\n    \"\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\",\r\n    \"\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\",\r\n    \"\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\",\r\n    \"\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\\u001f\\u0003\",\r\n    \"\\u001f\\u0003\\u001f\\u0003\\u001f\\u0005\\u001f\\u01b1\\n\\u001f\\u0003 \\u0003\",\r\n    \" \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003\",\r\n    \" \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003 \\u0003\",\r\n    \" \\u0003 \\u0005 \\u01ca\\n \\u0003!\\u0003!\\u0003!\\u0003!\\u0003!\\u0003!\\u0003\",\r\n    \"!\\u0003!\\u0003!\\u0003!\\u0003!\\u0003!\\u0005!\\u01d8\\n!\\u0003\\\"\\u0003\\\"\",\r\n    \"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\",\r\n    \"\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\",\r\n    \"\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0005\\\"\\u01f3\\n\\\"\\u0003#\",\r\n    \"\\u0003#\\u0003#\\u0003#\\u0003#\\u0003#\\u0005#\\u01fb\\n#\\u0003$\\u0003$\\u0003\",\r\n    \"$\\u0003$\\u0003$\\u0003$\\u0003$\\u0003$\\u0003$\\u0003$\\u0003$\\u0003$\\u0005\",\r\n    \"$\\u0209\\n$\\u0003%\\u0003%\\u0003%\\u0003%\\u0003%\\u0003%\\u0003%\\u0003%\\u0003\",\r\n    \"%\\u0003%\\u0003%\\u0003%\\u0005%\\u0217\\n%\\u0003&\\u0003&\\u0003&\\u0003&\\u0003\",\r\n    \"&\\u0003&\\u0003&\\u0003&\\u0003&\\u0003&\\u0005&\\u0223\\n&\\u0003\\'\\u0003\\'\",\r\n    \"\\u0003\\'\\u0003\\'\\u0003\\'\\u0003\\'\\u0005\\'\\u022b\\n\\'\\u0003(\\u0003(\\u0003\",\r\n    \"(\\u0003(\\u0003(\\u0003(\\u0005(\\u0233\\n(\\u0003)\\u0003)\\u0003)\\u0003)\\u0005\",\r\n    \")\\u0239\\n)\\u0003*\\u0003*\\u0003*\\u0003*\\u0003*\\u0003*\\u0005*\\u0241\\n\",\r\n    \"*\\u0003+\\u0003+\\u0003,\\u0003,\\u0003-\\u0003-\\u0003.\\u0003.\\u0003/\\u0003\",\r\n    \"/\\u00030\\u00030\\u00030\\u00030\\u00030\\u00030\\u00030\\u00030\\u00050\\u0255\",\r\n    \"\\n0\\u00031\\u00031\\u00031\\u00031\\u00051\\u025b\\n1\\u00032\\u00032\\u0003\",\r\n    \"2\\u00032\\u00032\\u00032\\u00032\\u00032\\u00032\\u00032\\u00032\\u00032\\u0005\",\r\n    \"2\\u0269\\n2\\u00033\\u00033\\u00033\\u00033\\u00033\\u00033\\u00033\\u00033\\u0003\",\r\n    \"3\\u00033\\u00033\\u00033\\u00033\\u00033\\u00033\\u00033\\u00053\\u027b\\n3\\u0003\",\r\n    \"4\\u00034\\u00034\\u00034\\u00034\\u00034\\u00054\\u0283\\n4\\u00035\\u00035\\u0003\",\r\n    \"5\\u00035\\u00035\\u00035\\u00035\\u00035\\u00055\\u028d\\n5\\u00036\\u00036\\u0003\",\r\n    \"6\\u00036\\u00036\\u00036\\u00036\\u00036\\u00036\\u00036\\u00056\\u0299\\n6\\u0003\",\r\n    \"7\\u00037\\u00037\\u00037\\u00037\\u00037\\u00037\\u00037\\u00037\\u00037\\u0003\",\r\n    \"7\\u00037\\u00037\\u00037\\u00057\\u02a9\\n7\\u00038\\u00038\\u00038\\u00038\\u0003\",\r\n    \"8\\u00038\\u00038\\u00038\\u00038\\u00038\\u00038\\u00038\\u00058\\u02b7\\n8\\u0003\",\r\n    \"9\\u00039\\u00039\\u00079\\u02bc\\n9\\f9\\u000e9\\u02bf\\u000b9\\u00059\\u02c1\",\r\n    \"\\n9\\u0003:\\u0003:\\u0003:\\u0007:\\u02c6\\n:\\f:\\u000e:\\u02c9\\u000b:\\u0005\",\r\n    \":\\u02cb\\n:\\u0003:\\u0003:\\u0006:\\u02cf\\n:\\r:\\u000e:\\u02d0\\u0005:\\u02d3\",\r\n    \"\\n:\\u0003:\\u0005:\\u02d6\\n:\\u0003;\\u0003;\\u0006;\\u02da\\n;\\r;\\u000e;\\u02db\",\r\n    \"\\u0003;\\u0003;\\u0003;\\u0006;\\u02e1\\n;\\r;\\u000e;\\u02e2\\u0003;\\u0003;\",\r\n    \"\\u0005;\\u02e7\\n;\\u0003;\\u0003;\\u0003;\\u0007;\\u02ec\\n;\\f;\\u000e;\\u02ef\",\r\n    \"\\u000b;\\u0003<\\u0003<\\u0003<\\u0003<\\u0003<\\u0003<\\u0007<\\u02f7\\n<\\f\",\r\n    \"<\\u000e<\\u02fa\\u000b<\\u0003<\\u0003<\\u0003=\\u0003=\\u0003=\\u0003=\\u0003\",\r\n    \">\\u0003>\\u0003>\\u0003?\\u0003?\\u0003?\\u0003@\\u0003@\\u0003@\\u0003A\\u0003\",\r\n    \"A\\u0003A\\u0003B\\u0003B\\u0003B\\u0003C\\u0003C\\u0003C\\u0003C\\u0003C\\u0003\",\r\n    \"C\\u0003C\\u0003C\\u0003D\\u0003D\\u0003D\\u0003D\\u0003D\\u0003D\\u0003D\\u0003\",\r\n    \"D\\u0003D\\u0003D\\u0003D\\u0003D\\u0003D\\u0003D\\u0003D\\u0005D\\u0328\\nD\\u0005\",\r\n    \"D\\u032a\\nD\\u0003D\\u0003D\\u0003E\\u0003E\\u0003E\\u0003E\\u0003E\\u0003E\\u0007\",\r\n    \"E\\u0334\\nE\\fE\\u000eE\\u0337\\u000bE\\u0003E\\u0003E\\u0003E\\u0003E\\u0003\",\r\n    \"E\\u0003E\\u0003E\\u0007E\\u0340\\nE\\fE\\u000eE\\u0343\\u000bE\\u0003E\\u0005\",\r\n    \"E\\u0346\\nE\\u0003F\\u0003F\\u0003F\\u0003F\\u0005\\u02f8\\u0335\\u0341\\u0002\",\r\n    \"G\\u0003\\u0002\\u0005\\u0002\\u0007\\u0002\\t\\u0002\\u000b\\u0002\\r\\u0002\\u000f\",\r\n    \"\\u0002\\u0011\\u0002\\u0013\\u0002\\u0015\\u0003\\u0017\\u0004\\u0019\\u0005\\u001b\",\r\n    \"\\u0006\\u001d\\u0007\\u001f\\b!\\t#\\n%\\u000b\\'\\f)\\r+\\u000e-\\u000f/\\u0010\",\r\n    \"1\\u00113\\u00125\\u00137\\u00149\\u0015;\\u0016=\\u0017?\\u0018A\\u0019C\\u001a\",\r\n    \"E\\u001bG\\u001cI\\u001dK\\u001eM\\u001fO Q!S\\\"U#W$Y%[&]\\'_(a)c*e+g,i-k.\",\r\n    \"m/o0q1s2u3w4y5{6}7\\u007f8\\u00819\\u0083:\\u0085;\\u0087<\\u0089=\\u008b>\",\r\n    \"\\u0003\\u0002\\u000f\\u0004\\u0002C\\\\c|\\u0003\\u00023;\\u0003\\u000224\\u0003\",\r\n    \"\\u000223\\u0003\\u000225\\u0003\\u000227\\u0004\\u0002GGgg\\u0004\\u0002--/\",\r\n    \"/\\u0004\\u0002^^bb\\u0004\\u0002\\\"\\\"VV\\u0004\\u0002$$^^\\u0004\\u0002))^^\",\r\n    \"\\u0005\\u0002\\u000b\\f\\u000f\\u000f\\\"\\\"\\u0002\\u0395\\u0002\\u0015\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002\\u0017\\u0003\\u0002\\u0002\\u0002\\u0002\\u0019\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002\\u001b\\u0003\\u0002\\u0002\\u0002\\u0002\\u001d\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002\\u001f\\u0003\\u0002\\u0002\\u0002\\u0002!\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002#\\u0003\\u0002\\u0002\\u0002\\u0002%\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002\\'\\u0003\\u0002\\u0002\\u0002\\u0002)\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002+\\u0003\\u0002\\u0002\\u0002\\u0002-\\u0003\\u0002\\u0002\\u0002\\u0002\",\r\n    \"/\\u0003\\u0002\\u0002\\u0002\\u00021\\u0003\\u0002\\u0002\\u0002\\u00023\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00025\\u0003\\u0002\\u0002\\u0002\\u00027\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00029\\u0003\\u0002\\u0002\\u0002\\u0002;\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002=\\u0003\\u0002\\u0002\\u0002\\u0002?\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002A\\u0003\\u0002\\u0002\\u0002\\u0002C\\u0003\\u0002\\u0002\\u0002\\u0002\",\r\n    \"E\\u0003\\u0002\\u0002\\u0002\\u0002G\\u0003\\u0002\\u0002\\u0002\\u0002I\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002K\\u0003\\u0002\\u0002\\u0002\\u0002M\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002O\\u0003\\u0002\\u0002\\u0002\\u0002Q\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002S\\u0003\\u0002\\u0002\\u0002\\u0002U\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002W\\u0003\\u0002\\u0002\\u0002\\u0002Y\\u0003\\u0002\\u0002\\u0002\\u0002\",\r\n    \"[\\u0003\\u0002\\u0002\\u0002\\u0002]\\u0003\\u0002\\u0002\\u0002\\u0002_\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002a\\u0003\\u0002\\u0002\\u0002\\u0002c\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002e\\u0003\\u0002\\u0002\\u0002\\u0002g\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002i\\u0003\\u0002\\u0002\\u0002\\u0002k\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002m\\u0003\\u0002\\u0002\\u0002\\u0002o\\u0003\\u0002\\u0002\\u0002\\u0002\",\r\n    \"q\\u0003\\u0002\\u0002\\u0002\\u0002s\\u0003\\u0002\\u0002\\u0002\\u0002u\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002w\\u0003\\u0002\\u0002\\u0002\\u0002y\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002{\\u0003\\u0002\\u0002\\u0002\\u0002}\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002\\u007f\\u0003\\u0002\\u0002\\u0002\\u0002\\u0081\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002\\u0083\\u0003\\u0002\\u0002\\u0002\\u0002\\u0085\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002\\u0087\\u0003\\u0002\\u0002\\u0002\\u0002\\u0089\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002\\u008b\\u0003\\u0002\\u0002\\u0002\\u0003\\u008d\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0005\\u008f\\u0003\\u0002\\u0002\\u0002\\u0007\\u0091\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\t\\u009a\\u0003\\u0002\\u0002\\u0002\\u000b\\u00a0\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\r\\u00a6\\u0003\\u0002\\u0002\\u0002\\u000f\\u00a8\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0011\\u00ab\\u0003\\u0002\\u0002\\u0002\\u0013\\u00b4\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0015\\u00bd\\u0003\\u0002\\u0002\\u0002\\u0017\\u00bf\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0019\\u00c1\\u0003\\u0002\\u0002\\u0002\\u001b\\u00c3\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u001d\\u00c5\\u0003\\u0002\\u0002\\u0002\\u001f\\u00c7\\u0003\\u0002\\u0002\",\r\n    \"\\u0002!\\u00c9\\u0003\\u0002\\u0002\\u0002#\\u00cb\\u0003\\u0002\\u0002\\u0002\",\r\n    \"%\\u00cd\\u0003\\u0002\\u0002\\u0002\\'\\u00cf\\u0003\\u0002\\u0002\\u0002)\\u00d1\",\r\n    \"\\u0003\\u0002\\u0002\\u0002+\\u00d7\\u0003\\u0002\\u0002\\u0002-\\u00e1\\u0003\",\r\n    \"\\u0002\\u0002\\u0002/\\u00ed\\u0003\\u0002\\u0002\\u00021\\u00fd\\u0003\\u0002\",\r\n    \"\\u0002\\u00023\\u0112\\u0003\\u0002\\u0002\\u00025\\u0130\\u0003\\u0002\\u0002\",\r\n    \"\\u00027\\u0145\\u0003\\u0002\\u0002\\u00029\\u015e\\u0003\\u0002\\u0002\\u0002\",\r\n    \";\\u018a\\u0003\\u0002\\u0002\\u0002=\\u01b0\\u0003\\u0002\\u0002\\u0002?\\u01c9\",\r\n    \"\\u0003\\u0002\\u0002\\u0002A\\u01d7\\u0003\\u0002\\u0002\\u0002C\\u01f2\\u0003\",\r\n    \"\\u0002\\u0002\\u0002E\\u01fa\\u0003\\u0002\\u0002\\u0002G\\u0208\\u0003\\u0002\",\r\n    \"\\u0002\\u0002I\\u0216\\u0003\\u0002\\u0002\\u0002K\\u0222\\u0003\\u0002\\u0002\",\r\n    \"\\u0002M\\u022a\\u0003\\u0002\\u0002\\u0002O\\u0232\\u0003\\u0002\\u0002\\u0002\",\r\n    \"Q\\u0238\\u0003\\u0002\\u0002\\u0002S\\u0240\\u0003\\u0002\\u0002\\u0002U\\u0242\",\r\n    \"\\u0003\\u0002\\u0002\\u0002W\\u0244\\u0003\\u0002\\u0002\\u0002Y\\u0246\\u0003\",\r\n    \"\\u0002\\u0002\\u0002[\\u0248\\u0003\\u0002\\u0002\\u0002]\\u024a\\u0003\\u0002\",\r\n    \"\\u0002\\u0002_\\u0254\\u0003\\u0002\\u0002\\u0002a\\u025a\\u0003\\u0002\\u0002\",\r\n    \"\\u0002c\\u0268\\u0003\\u0002\\u0002\\u0002e\\u027a\\u0003\\u0002\\u0002\\u0002\",\r\n    \"g\\u0282\\u0003\\u0002\\u0002\\u0002i\\u028c\\u0003\\u0002\\u0002\\u0002k\\u0298\",\r\n    \"\\u0003\\u0002\\u0002\\u0002m\\u02a8\\u0003\\u0002\\u0002\\u0002o\\u02b6\\u0003\",\r\n    \"\\u0002\\u0002\\u0002q\\u02c0\\u0003\\u0002\\u0002\\u0002s\\u02ca\\u0003\\u0002\",\r\n    \"\\u0002\\u0002u\\u02e6\\u0003\\u0002\\u0002\\u0002w\\u02f0\\u0003\\u0002\\u0002\",\r\n    \"\\u0002y\\u02fd\\u0003\\u0002\\u0002\\u0002{\\u0301\\u0003\\u0002\\u0002\\u0002\",\r\n    \"}\\u0304\\u0003\\u0002\\u0002\\u0002\\u007f\\u0307\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0081\\u030a\\u0003\\u0002\\u0002\\u0002\\u0083\\u030d\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0085\\u0310\\u0003\\u0002\\u0002\\u0002\\u0087\\u0318\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0089\\u0345\\u0003\\u0002\\u0002\\u0002\\u008b\\u0347\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u008d\\u008e\\u00042;\\u0002\\u008e\\u0004\\u0003\\u0002\\u0002\\u0002\\u008f\",\r\n    \"\\u0090\\t\\u0002\\u0002\\u0002\\u0090\\u0006\\u0003\\u0002\\u0002\\u0002\\u0091\",\r\n    \"\\u0092\\u0005\\u0003\\u0002\\u0002\\u0092\\u0093\\u0005\\u0003\\u0002\\u0002\\u0093\",\r\n    \"\\u0094\\u0005\\u0003\\u0002\\u0002\\u0094\\u0095\\u0005\\u0003\\u0002\\u0002\\u0095\",\r\n    \"\\b\\u0003\\u0002\\u0002\\u0002\\u0096\\u0097\\u00072\\u0002\\u0002\\u0097\\u009b\",\r\n    \"\\t\\u0003\\u0002\\u0002\\u0098\\u0099\\u00073\\u0002\\u0002\\u0099\\u009b\\t\\u0004\",\r\n    \"\\u0002\\u0002\\u009a\\u0096\\u0003\\u0002\\u0002\\u0002\\u009a\\u0098\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u009b\\n\\u0003\\u0002\\u0002\\u0002\\u009c\\u009d\\t\\u0004\\u0002\",\r\n    \"\\u0002\\u009d\\u00a1\\u0005\\u0003\\u0002\\u0002\\u009e\\u009f\\u00075\\u0002\",\r\n    \"\\u0002\\u009f\\u00a1\\t\\u0005\\u0002\\u0002\\u00a0\\u009c\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00a0\\u009e\\u0003\\u0002\\u0002\\u0002\\u00a1\\f\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00a2\\u00a3\\t\\u0005\\u0002\\u0002\\u00a3\\u00a7\\u0005\\u0003\\u0002\",\r\n    \"\\u0002\\u00a4\\u00a5\\u00074\\u0002\\u0002\\u00a5\\u00a7\\t\\u0006\\u0002\\u0002\",\r\n    \"\\u00a6\\u00a2\\u0003\\u0002\\u0002\\u0002\\u00a6\\u00a4\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00a7\\u000e\\u0003\\u0002\\u0002\\u0002\\u00a8\\u00a9\\t\\u0007\\u0002\\u0002\",\r\n    \"\\u00a9\\u00aa\\u0005\\u0003\\u0002\\u0002\\u00aa\\u0010\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00ab\\u00ac\\u0005\\u0003\\u0002\\u0002\\u00ac\\u00ad\\u0005\\u0003\\u0002\\u0002\",\r\n    \"\\u00ad\\u00b2\\u0005\\u0003\\u0002\\u0002\\u00ae\\u00af\\u0005\\u0003\\u0002\\u0002\",\r\n    \"\\u00af\\u00b0\\u0005\\u0003\\u0002\\u0002\\u00b0\\u00b1\\u0005\\u0003\\u0002\\u0002\",\r\n    \"\\u00b1\\u00b3\\u0003\\u0002\\u0002\\u0002\\u00b2\\u00ae\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00b2\\u00b3\\u0003\\u0002\\u0002\\u0002\\u00b3\\u0012\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00b4\\u00b6\\t\\b\\u0002\\u0002\\u00b5\\u00b7\\t\\t\\u0002\\u0002\\u00b6\\u00b5\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00b6\\u00b7\\u0003\\u0002\\u0002\\u0002\\u00b7\\u00b9\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00b8\\u00ba\\u0005\\u0003\\u0002\\u0002\\u00b9\\u00b8\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00ba\\u00bb\\u0003\\u0002\\u0002\\u0002\\u00bb\\u00b9\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00bb\\u00bc\\u0003\\u0002\\u0002\\u0002\\u00bc\\u0014\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00bd\\u00be\\u0007a\\u0002\\u0002\\u00be\\u0016\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00bf\\u00c0\\u0007*\\u0002\\u0002\\u00c0\\u0018\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c1\\u00c2\\u0007+\\u0002\\u0002\\u00c2\\u001a\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c3\\u00c4\\u0007]\\u0002\\u0002\\u00c4\\u001c\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c5\\u00c6\\u0007_\\u0002\\u0002\\u00c6\\u001e\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00c7\\u00c8\\u0007~\\u0002\\u0002\\u00c8 \\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00c9\\u00ca\\u0007A\\u0002\\u0002\\u00ca\\\"\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00cb\\u00cc\\u0007<\\u0002\\u0002\\u00cc$\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00cd\\u00ce\\u0007=\\u0002\\u0002\\u00ce&\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00cf\\u00d0\\u00070\\u0002\\u0002\\u00d0(\\u0003\\u0002\\u0002\\u0002\\u00d1\",\r\n    \"\\u00d2\\u0007.\\u0002\\u0002\\u00d2*\\u0003\\u0002\\u0002\\u0002\\u00d3\\u00d4\",\r\n    \"\\u0007C\\u0002\\u0002\\u00d4\\u00d8\\u0007U\\u0002\\u0002\\u00d5\\u00d6\\u0007\",\r\n    \"c\\u0002\\u0002\\u00d6\\u00d8\\u0007u\\u0002\\u0002\\u00d7\\u00d3\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00d7\\u00d5\\u0003\\u0002\\u0002\\u0002\\u00d8,\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00d9\\u00da\\u0007V\\u0002\\u0002\\u00da\\u00db\\u0007T\\u0002\",\r\n    \"\\u0002\\u00db\\u00dc\\u0007W\\u0002\\u0002\\u00dc\\u00e2\\u0007G\\u0002\\u0002\",\r\n    \"\\u00dd\\u00de\\u0007v\\u0002\\u0002\\u00de\\u00df\\u0007t\\u0002\\u0002\\u00df\",\r\n    \"\\u00e0\\u0007w\\u0002\\u0002\\u00e0\\u00e2\\u0007g\\u0002\\u0002\\u00e1\\u00d9\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00e1\\u00dd\\u0003\\u0002\\u0002\\u0002\\u00e2.\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00e3\\u00e4\\u0007H\\u0002\\u0002\\u00e4\\u00e5\",\r\n    \"\\u0007C\\u0002\\u0002\\u00e5\\u00e6\\u0007N\\u0002\\u0002\\u00e6\\u00e7\\u0007\",\r\n    \"U\\u0002\\u0002\\u00e7\\u00ee\\u0007G\\u0002\\u0002\\u00e8\\u00e9\\u0007h\\u0002\",\r\n    \"\\u0002\\u00e9\\u00ea\\u0007c\\u0002\\u0002\\u00ea\\u00eb\\u0007n\\u0002\\u0002\",\r\n    \"\\u00eb\\u00ec\\u0007u\\u0002\\u0002\\u00ec\\u00ee\\u0007g\\u0002\\u0002\\u00ed\",\r\n    \"\\u00e3\\u0003\\u0002\\u0002\\u0002\\u00ed\\u00e8\\u0003\\u0002\\u0002\\u0002\\u00ee\",\r\n    \"0\\u0003\\u0002\\u0002\\u0002\\u00ef\\u00f0\\u0007D\\u0002\\u0002\\u00f0\\u00f1\",\r\n    \"\\u0007G\\u0002\\u0002\\u00f1\\u00f2\\u0007V\\u0002\\u0002\\u00f2\\u00f3\\u0007\",\r\n    \"Y\\u0002\\u0002\\u00f3\\u00f4\\u0007G\\u0002\\u0002\\u00f4\\u00f5\\u0007G\\u0002\",\r\n    \"\\u0002\\u00f5\\u00fe\\u0007P\\u0002\\u0002\\u00f6\\u00f7\\u0007d\\u0002\\u0002\",\r\n    \"\\u00f7\\u00f8\\u0007g\\u0002\\u0002\\u00f8\\u00f9\\u0007v\\u0002\\u0002\\u00f9\",\r\n    \"\\u00fa\\u0007y\\u0002\\u0002\\u00fa\\u00fb\\u0007g\\u0002\\u0002\\u00fb\\u00fc\",\r\n    \"\\u0007g\\u0002\\u0002\\u00fc\\u00fe\\u0007p\\u0002\\u0002\\u00fd\\u00ef\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00fd\\u00f6\\u0003\\u0002\\u0002\\u0002\\u00fe2\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00ff\\u0100\\u0007?\\u0002\\u0002\\u0100\\u0113\\u0007\",\r\n    \"?\\u0002\\u0002\\u0101\\u0113\\u0007?\\u0002\\u0002\\u0102\\u0103\\u0007g\\u0002\",\r\n    \"\\u0002\\u0103\\u0113\\u0007s\\u0002\\u0002\\u0104\\u0105\\u0007G\\u0002\\u0002\",\r\n    \"\\u0105\\u0113\\u0007S\\u0002\\u0002\\u0106\\u0107\\u0007g\\u0002\\u0002\\u0107\",\r\n    \"\\u0108\\u0007s\\u0002\\u0002\\u0108\\u0109\\u0007w\\u0002\\u0002\\u0109\\u010a\",\r\n    \"\\u0007c\\u0002\\u0002\\u010a\\u010b\\u0007n\\u0002\\u0002\\u010b\\u0113\\u0007\",\r\n    \"u\\u0002\\u0002\\u010c\\u010d\\u0007G\\u0002\\u0002\\u010d\\u010e\\u0007S\\u0002\",\r\n    \"\\u0002\\u010e\\u010f\\u0007W\\u0002\\u0002\\u010f\\u0110\\u0007C\\u0002\\u0002\",\r\n    \"\\u0110\\u0111\\u0007N\\u0002\\u0002\\u0111\\u0113\\u0007U\\u0002\\u0002\\u0112\",\r\n    \"\\u00ff\\u0003\\u0002\\u0002\\u0002\\u0112\\u0101\\u0003\\u0002\\u0002\\u0002\\u0112\",\r\n    \"\\u0102\\u0003\\u0002\\u0002\\u0002\\u0112\\u0104\\u0003\\u0002\\u0002\\u0002\\u0112\",\r\n    \"\\u0106\\u0003\\u0002\\u0002\\u0002\\u0112\\u010c\\u0003\\u0002\\u0002\\u0002\\u0113\",\r\n    \"4\\u0003\\u0002\\u0002\\u0002\\u0114\\u0115\\u0007#\\u0002\\u0002\\u0115\\u0131\",\r\n    \"\\u0007?\\u0002\\u0002\\u0116\\u0117\\u0007p\\u0002\\u0002\\u0117\\u0118\\u0007\",\r\n    \"g\\u0002\\u0002\\u0118\\u0131\\u0007s\\u0002\\u0002\\u0119\\u011a\\u0007P\\u0002\",\r\n    \"\\u0002\\u011a\\u011b\\u0007G\\u0002\\u0002\\u011b\\u0131\\u0007S\\u0002\\u0002\",\r\n    \"\\u011c\\u011d\\u0007p\\u0002\\u0002\\u011d\\u011e\\u0007q\\u0002\\u0002\\u011e\",\r\n    \"\\u011f\\u0007v\\u0002\\u0002\\u011f\\u0120\\u0007\\\"\\u0002\\u0002\\u0120\\u0121\",\r\n    \"\\u0007g\\u0002\\u0002\\u0121\\u0122\\u0007s\\u0002\\u0002\\u0122\\u0123\\u0007\",\r\n    \"w\\u0002\\u0002\\u0123\\u0124\\u0007c\\u0002\\u0002\\u0124\\u0125\\u0007n\\u0002\",\r\n    \"\\u0002\\u0125\\u0131\\u0007u\\u0002\\u0002\\u0126\\u0127\\u0007P\\u0002\\u0002\",\r\n    \"\\u0127\\u0128\\u0007Q\\u0002\\u0002\\u0128\\u0129\\u0007V\\u0002\\u0002\\u0129\",\r\n    \"\\u012a\\u0007\\\"\\u0002\\u0002\\u012a\\u012b\\u0007G\\u0002\\u0002\\u012b\\u012c\",\r\n    \"\\u0007S\\u0002\\u0002\\u012c\\u012d\\u0007W\\u0002\\u0002\\u012d\\u012e\\u0007\",\r\n    \"C\\u0002\\u0002\\u012e\\u012f\\u0007N\\u0002\\u0002\\u012f\\u0131\\u0007U\\u0002\",\r\n    \"\\u0002\\u0130\\u0114\\u0003\\u0002\\u0002\\u0002\\u0130\\u0116\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0130\\u0119\\u0003\\u0002\\u0002\\u0002\\u0130\\u011c\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0130\\u0126\\u0003\\u0002\\u0002\\u0002\\u01316\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0132\\u0146\\u0007@\\u0002\\u0002\\u0133\\u0134\\u0007i\\u0002\\u0002\",\r\n    \"\\u0134\\u0146\\u0007v\\u0002\\u0002\\u0135\\u0136\\u0007I\\u0002\\u0002\\u0136\",\r\n    \"\\u0146\\u0007V\\u0002\\u0002\\u0137\\u0138\\u0007i\\u0002\\u0002\\u0138\\u0139\",\r\n    \"\\u0007t\\u0002\\u0002\\u0139\\u013a\\u0007g\\u0002\\u0002\\u013a\\u013b\\u0007\",\r\n    \"c\\u0002\\u0002\\u013b\\u013c\\u0007v\\u0002\\u0002\\u013c\\u013d\\u0007g\\u0002\",\r\n    \"\\u0002\\u013d\\u0146\\u0007t\\u0002\\u0002\\u013e\\u013f\\u0007I\\u0002\\u0002\",\r\n    \"\\u013f\\u0140\\u0007T\\u0002\\u0002\\u0140\\u0141\\u0007G\\u0002\\u0002\\u0141\",\r\n    \"\\u0142\\u0007C\\u0002\\u0002\\u0142\\u0143\\u0007V\\u0002\\u0002\\u0143\\u0144\",\r\n    \"\\u0007G\\u0002\\u0002\\u0144\\u0146\\u0007T\\u0002\\u0002\\u0145\\u0132\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0145\\u0133\\u0003\\u0002\\u0002\\u0002\\u0145\\u0135\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0145\\u0137\\u0003\\u0002\\u0002\\u0002\\u0145\\u013e\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u01468\\u0003\\u0002\\u0002\\u0002\\u0147\\u015f\\u0007\",\r\n    \">\\u0002\\u0002\\u0148\\u0149\\u0007n\\u0002\\u0002\\u0149\\u015f\\u0007v\\u0002\",\r\n    \"\\u0002\\u014a\\u014b\\u0007N\\u0002\\u0002\\u014b\\u015f\\u0007V\\u0002\\u0002\",\r\n    \"\\u014c\\u014d\\u0007n\\u0002\\u0002\\u014d\\u014e\\u0007g\\u0002\\u0002\\u014e\",\r\n    \"\\u014f\\u0007u\\u0002\\u0002\\u014f\\u0150\\u0007u\\u0002\\u0002\\u0150\\u0151\",\r\n    \"\\u0007\\\"\\u0002\\u0002\\u0151\\u0152\\u0007v\\u0002\\u0002\\u0152\\u0153\\u0007\",\r\n    \"j\\u0002\\u0002\\u0153\\u0154\\u0007c\\u0002\\u0002\\u0154\\u015f\\u0007p\\u0002\",\r\n    \"\\u0002\\u0155\\u0156\\u0007N\\u0002\\u0002\\u0156\\u0157\\u0007G\\u0002\\u0002\",\r\n    \"\\u0157\\u0158\\u0007U\\u0002\\u0002\\u0158\\u0159\\u0007U\\u0002\\u0002\\u0159\",\r\n    \"\\u015a\\u0007\\\"\\u0002\\u0002\\u015a\\u015b\\u0007V\\u0002\\u0002\\u015b\\u015c\",\r\n    \"\\u0007J\\u0002\\u0002\\u015c\\u015d\\u0007C\\u0002\\u0002\\u015d\\u015f\\u0007\",\r\n    \"P\\u0002\\u0002\\u015e\\u0147\\u0003\\u0002\\u0002\\u0002\\u015e\\u0148\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u015e\\u014a\\u0003\\u0002\\u0002\\u0002\\u015e\\u014c\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u015e\\u0155\\u0003\\u0002\\u0002\\u0002\\u015f:\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0160\\u0161\\u0007@\\u0002\\u0002\\u0161\\u018b\\u0007\",\r\n    \"?\\u0002\\u0002\\u0162\\u0163\\u0007i\\u0002\\u0002\\u0163\\u0164\\u0007v\\u0002\",\r\n    \"\\u0002\\u0164\\u018b\\u0007g\\u0002\\u0002\\u0165\\u0166\\u0007I\\u0002\\u0002\",\r\n    \"\\u0166\\u0167\\u0007V\\u0002\\u0002\\u0167\\u018b\\u0007G\\u0002\\u0002\\u0168\",\r\n    \"\\u0169\\u0007i\\u0002\\u0002\\u0169\\u016a\\u0007t\\u0002\\u0002\\u016a\\u016b\",\r\n    \"\\u0007g\\u0002\\u0002\\u016b\\u016c\\u0007c\\u0002\\u0002\\u016c\\u016d\\u0007\",\r\n    \"v\\u0002\\u0002\\u016d\\u016e\\u0007g\\u0002\\u0002\\u016e\\u016f\\u0007t\\u0002\",\r\n    \"\\u0002\\u016f\\u0170\\u0007\\\"\\u0002\\u0002\\u0170\\u0171\\u0007q\\u0002\\u0002\",\r\n    \"\\u0171\\u0172\\u0007t\\u0002\\u0002\\u0172\\u0173\\u0007\\\"\\u0002\\u0002\\u0173\",\r\n    \"\\u0174\\u0007g\\u0002\\u0002\\u0174\\u0175\\u0007s\\u0002\\u0002\\u0175\\u0176\",\r\n    \"\\u0007w\\u0002\\u0002\\u0176\\u0177\\u0007c\\u0002\\u0002\\u0177\\u0178\\u0007\",\r\n    \"n\\u0002\\u0002\\u0178\\u018b\\u0007u\\u0002\\u0002\\u0179\\u017a\\u0007I\\u0002\",\r\n    \"\\u0002\\u017a\\u017b\\u0007T\\u0002\\u0002\\u017b\\u017c\\u0007G\\u0002\\u0002\",\r\n    \"\\u017c\\u017d\\u0007C\\u0002\\u0002\\u017d\\u017e\\u0007V\\u0002\\u0002\\u017e\",\r\n    \"\\u017f\\u0007G\\u0002\\u0002\\u017f\\u0180\\u0007T\\u0002\\u0002\\u0180\\u0181\",\r\n    \"\\u0007\\\"\\u0002\\u0002\\u0181\\u0182\\u0007Q\\u0002\\u0002\\u0182\\u0183\\u0007\",\r\n    \"T\\u0002\\u0002\\u0183\\u0184\\u0007\\\"\\u0002\\u0002\\u0184\\u0185\\u0007G\\u0002\",\r\n    \"\\u0002\\u0185\\u0186\\u0007S\\u0002\\u0002\\u0186\\u0187\\u0007W\\u0002\\u0002\",\r\n    \"\\u0187\\u0188\\u0007C\\u0002\\u0002\\u0188\\u0189\\u0007N\\u0002\\u0002\\u0189\",\r\n    \"\\u018b\\u0007U\\u0002\\u0002\\u018a\\u0160\\u0003\\u0002\\u0002\\u0002\\u018a\",\r\n    \"\\u0162\\u0003\\u0002\\u0002\\u0002\\u018a\\u0165\\u0003\\u0002\\u0002\\u0002\\u018a\",\r\n    \"\\u0168\\u0003\\u0002\\u0002\\u0002\\u018a\\u0179\\u0003\\u0002\\u0002\\u0002\\u018b\",\r\n    \"<\\u0003\\u0002\\u0002\\u0002\\u018c\\u018d\\u0007>\\u0002\\u0002\\u018d\\u01b1\",\r\n    \"\\u0007?\\u0002\\u0002\\u018e\\u018f\\u0007n\\u0002\\u0002\\u018f\\u0190\\u0007\",\r\n    \"v\\u0002\\u0002\\u0190\\u01b1\\u0007g\\u0002\\u0002\\u0191\\u0192\\u0007N\\u0002\",\r\n    \"\\u0002\\u0192\\u0193\\u0007V\\u0002\\u0002\\u0193\\u01b1\\u0007G\\u0002\\u0002\",\r\n    \"\\u0194\\u0195\\u0007n\\u0002\\u0002\\u0195\\u0196\\u0007g\\u0002\\u0002\\u0196\",\r\n    \"\\u0197\\u0007u\\u0002\\u0002\\u0197\\u0198\\u0007u\\u0002\\u0002\\u0198\\u0199\",\r\n    \"\\u0007\\\"\\u0002\\u0002\\u0199\\u019a\\u0007q\\u0002\\u0002\\u019a\\u019b\\u0007\",\r\n    \"t\\u0002\\u0002\\u019b\\u019c\\u0007\\\"\\u0002\\u0002\\u019c\\u019d\\u0007g\\u0002\",\r\n    \"\\u0002\\u019d\\u019e\\u0007s\\u0002\\u0002\\u019e\\u019f\\u0007w\\u0002\\u0002\",\r\n    \"\\u019f\\u01a0\\u0007c\\u0002\\u0002\\u01a0\\u01a1\\u0007n\\u0002\\u0002\\u01a1\",\r\n    \"\\u01b1\\u0007u\\u0002\\u0002\\u01a2\\u01a3\\u0007N\\u0002\\u0002\\u01a3\\u01a4\",\r\n    \"\\u0007G\\u0002\\u0002\\u01a4\\u01a5\\u0007U\\u0002\\u0002\\u01a5\\u01a6\\u0007\",\r\n    \"U\\u0002\\u0002\\u01a6\\u01a7\\u0007\\\"\\u0002\\u0002\\u01a7\\u01a8\\u0007Q\\u0002\",\r\n    \"\\u0002\\u01a8\\u01a9\\u0007T\\u0002\\u0002\\u01a9\\u01aa\\u0007\\\"\\u0002\\u0002\",\r\n    \"\\u01aa\\u01ab\\u0007G\\u0002\\u0002\\u01ab\\u01ac\\u0007S\\u0002\\u0002\\u01ac\",\r\n    \"\\u01ad\\u0007W\\u0002\\u0002\\u01ad\\u01ae\\u0007C\\u0002\\u0002\\u01ae\\u01af\",\r\n    \"\\u0007N\\u0002\\u0002\\u01af\\u01b1\\u0007U\\u0002\\u0002\\u01b0\\u018c\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u01b0\\u018e\\u0003\\u0002\\u0002\\u0002\\u01b0\\u0191\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u01b0\\u0194\\u0003\\u0002\\u0002\\u0002\\u01b0\\u01a2\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u01b1>\\u0003\\u0002\\u0002\\u0002\\u01b2\\u01ca\\u0007\",\r\n    \"\\u0080\\u0002\\u0002\\u01b3\\u01b4\\u0007t\\u0002\\u0002\\u01b4\\u01b5\\u0007\",\r\n    \"g\\u0002\\u0002\\u01b5\\u01b6\\u0007i\\u0002\\u0002\\u01b6\\u01b7\\u0007g\\u0002\",\r\n    \"\\u0002\\u01b7\\u01b8\\u0007z\\u0002\\u0002\\u01b8\\u01b9\\u0007\\\"\\u0002\\u0002\",\r\n    \"\\u01b9\\u01ba\\u0007o\\u0002\\u0002\\u01ba\\u01bb\\u0007c\\u0002\\u0002\\u01bb\",\r\n    \"\\u01bc\\u0007v\\u0002\\u0002\\u01bc\\u01bd\\u0007e\\u0002\\u0002\\u01bd\\u01ca\",\r\n    \"\\u0007j\\u0002\\u0002\\u01be\\u01bf\\u0007T\\u0002\\u0002\\u01bf\\u01c0\\u0007\",\r\n    \"G\\u0002\\u0002\\u01c0\\u01c1\\u0007I\\u0002\\u0002\\u01c1\\u01c2\\u0007G\\u0002\",\r\n    \"\\u0002\\u01c2\\u01c3\\u0007Z\\u0002\\u0002\\u01c3\\u01c4\\u0007\\\"\\u0002\\u0002\",\r\n    \"\\u01c4\\u01c5\\u0007O\\u0002\\u0002\\u01c5\\u01c6\\u0007C\\u0002\\u0002\\u01c6\",\r\n    \"\\u01c7\\u0007V\\u0002\\u0002\\u01c7\\u01c8\\u0007E\\u0002\\u0002\\u01c8\\u01ca\",\r\n    \"\\u0007J\\u0002\\u0002\\u01c9\\u01b2\\u0003\\u0002\\u0002\\u0002\\u01c9\\u01b3\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u01c9\\u01be\\u0003\\u0002\\u0002\\u0002\\u01ca@\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u01cb\\u01cc\\u0007?\\u0002\\u0002\\u01cc\\u01d8\",\r\n    \"\\u0007\\u0080\\u0002\\u0002\\u01cd\\u01ce\\u0007o\\u0002\\u0002\\u01ce\\u01cf\",\r\n    \"\\u0007c\\u0002\\u0002\\u01cf\\u01d0\\u0007v\\u0002\\u0002\\u01d0\\u01d1\\u0007\",\r\n    \"e\\u0002\\u0002\\u01d1\\u01d8\\u0007j\\u0002\\u0002\\u01d2\\u01d3\\u0007O\\u0002\",\r\n    \"\\u0002\\u01d3\\u01d4\\u0007C\\u0002\\u0002\\u01d4\\u01d5\\u0007V\\u0002\\u0002\",\r\n    \"\\u01d5\\u01d6\\u0007E\\u0002\\u0002\\u01d6\\u01d8\\u0007J\\u0002\\u0002\\u01d7\",\r\n    \"\\u01cb\\u0003\\u0002\\u0002\\u0002\\u01d7\\u01cd\\u0003\\u0002\\u0002\\u0002\\u01d7\",\r\n    \"\\u01d2\\u0003\\u0002\\u0002\\u0002\\u01d8B\\u0003\\u0002\\u0002\\u0002\\u01d9\",\r\n    \"\\u01da\\u0007?\\u0002\\u0002\\u01da\\u01db\\u0007?\\u0002\\u0002\\u01db\\u01f3\",\r\n    \"\\u0007\\u0080\\u0002\\u0002\\u01dc\\u01dd\\u0007o\\u0002\\u0002\\u01dd\\u01de\",\r\n    \"\\u0007c\\u0002\\u0002\\u01de\\u01df\\u0007v\\u0002\\u0002\\u01df\\u01e0\\u0007\",\r\n    \"e\\u0002\\u0002\\u01e0\\u01e1\\u0007j\\u0002\\u0002\\u01e1\\u01e2\\u0007\\\"\\u0002\",\r\n    \"\\u0002\\u01e2\\u01e3\\u0007g\\u0002\\u0002\\u01e3\\u01e4\\u0007z\\u0002\\u0002\",\r\n    \"\\u01e4\\u01e5\\u0007c\\u0002\\u0002\\u01e5\\u01e6\\u0007e\\u0002\\u0002\\u01e6\",\r\n    \"\\u01f3\\u0007v\\u0002\\u0002\\u01e7\\u01e8\\u0007O\\u0002\\u0002\\u01e8\\u01e9\",\r\n    \"\\u0007C\\u0002\\u0002\\u01e9\\u01ea\\u0007V\\u0002\\u0002\\u01ea\\u01eb\\u0007\",\r\n    \"E\\u0002\\u0002\\u01eb\\u01ec\\u0007J\\u0002\\u0002\\u01ec\\u01ed\\u0007\\\"\\u0002\",\r\n    \"\\u0002\\u01ed\\u01ee\\u0007G\\u0002\\u0002\\u01ee\\u01ef\\u0007Z\\u0002\\u0002\",\r\n    \"\\u01ef\\u01f0\\u0007C\\u0002\\u0002\\u01f0\\u01f1\\u0007E\\u0002\\u0002\\u01f1\",\r\n    \"\\u01f3\\u0007V\\u0002\\u0002\\u01f2\\u01d9\\u0003\\u0002\\u0002\\u0002\\u01f2\",\r\n    \"\\u01dc\\u0003\\u0002\\u0002\\u0002\\u01f2\\u01e7\\u0003\\u0002\\u0002\\u0002\\u01f3\",\r\n    \"D\\u0003\\u0002\\u0002\\u0002\\u01f4\\u01f5\\u0007y\\u0002\\u0002\\u01f5\\u01f6\",\r\n    \"\\u0007c\\u0002\\u0002\\u01f6\\u01fb\\u0007u\\u0002\\u0002\\u01f7\\u01f8\\u0007\",\r\n    \"Y\\u0002\\u0002\\u01f8\\u01f9\\u0007C\\u0002\\u0002\\u01f9\\u01fb\\u0007U\\u0002\",\r\n    \"\\u0002\\u01fa\\u01f4\\u0003\\u0002\\u0002\\u0002\\u01fa\\u01f7\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u01fbF\\u0003\\u0002\\u0002\\u0002\\u01fc\\u01fd\\u0007f\\u0002\\u0002\",\r\n    \"\\u01fd\\u01fe\\u0007w\\u0002\\u0002\\u01fe\\u01ff\\u0007t\\u0002\\u0002\\u01ff\",\r\n    \"\\u0200\\u0007k\\u0002\\u0002\\u0200\\u0201\\u0007p\\u0002\\u0002\\u0201\\u0209\",\r\n    \"\\u0007i\\u0002\\u0002\\u0202\\u0203\\u0007F\\u0002\\u0002\\u0203\\u0204\\u0007\",\r\n    \"W\\u0002\\u0002\\u0204\\u0205\\u0007T\\u0002\\u0002\\u0205\\u0206\\u0007K\\u0002\",\r\n    \"\\u0002\\u0206\\u0207\\u0007P\\u0002\\u0002\\u0207\\u0209\\u0007I\\u0002\\u0002\",\r\n    \"\\u0208\\u01fc\\u0003\\u0002\\u0002\\u0002\\u0208\\u0202\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0209H\\u0003\\u0002\\u0002\\u0002\\u020a\\u020b\\u0007d\\u0002\\u0002\\u020b\",\r\n    \"\\u020c\\u0007g\\u0002\\u0002\\u020c\\u020d\\u0007h\\u0002\\u0002\\u020d\\u020e\",\r\n    \"\\u0007q\\u0002\\u0002\\u020e\\u020f\\u0007t\\u0002\\u0002\\u020f\\u0217\\u0007\",\r\n    \"g\\u0002\\u0002\\u0210\\u0211\\u0007D\\u0002\\u0002\\u0211\\u0212\\u0007G\\u0002\",\r\n    \"\\u0002\\u0212\\u0213\\u0007H\\u0002\\u0002\\u0213\\u0214\\u0007Q\\u0002\\u0002\",\r\n    \"\\u0214\\u0215\\u0007T\\u0002\\u0002\\u0215\\u0217\\u0007G\\u0002\\u0002\\u0216\",\r\n    \"\\u020a\\u0003\\u0002\\u0002\\u0002\\u0216\\u0210\\u0003\\u0002\\u0002\\u0002\\u0217\",\r\n    \"J\\u0003\\u0002\\u0002\\u0002\\u0218\\u0219\\u0007c\\u0002\\u0002\\u0219\\u021a\",\r\n    \"\\u0007h\\u0002\\u0002\\u021a\\u021b\\u0007v\\u0002\\u0002\\u021b\\u021c\\u0007\",\r\n    \"g\\u0002\\u0002\\u021c\\u0223\\u0007t\\u0002\\u0002\\u021d\\u021e\\u0007C\\u0002\",\r\n    \"\\u0002\\u021e\\u021f\\u0007H\\u0002\\u0002\\u021f\\u0220\\u0007V\\u0002\\u0002\",\r\n    \"\\u0220\\u0221\\u0007G\\u0002\\u0002\\u0221\\u0223\\u0007T\\u0002\\u0002\\u0222\",\r\n    \"\\u0218\\u0003\\u0002\\u0002\\u0002\\u0222\\u021d\\u0003\\u0002\\u0002\\u0002\\u0223\",\r\n    \"L\\u0003\\u0002\\u0002\\u0002\\u0224\\u0225\\u0007P\\u0002\\u0002\\u0225\\u0226\",\r\n    \"\\u0007Q\\u0002\\u0002\\u0226\\u022b\\u0007V\\u0002\\u0002\\u0227\\u0228\\u0007\",\r\n    \"p\\u0002\\u0002\\u0228\\u0229\\u0007q\\u0002\\u0002\\u0229\\u022b\\u0007v\\u0002\",\r\n    \"\\u0002\\u022a\\u0224\\u0003\\u0002\\u0002\\u0002\\u022a\\u0227\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u022bN\\u0003\\u0002\\u0002\\u0002\\u022c\\u022d\\u0007C\\u0002\\u0002\",\r\n    \"\\u022d\\u022e\\u0007P\\u0002\\u0002\\u022e\\u0233\\u0007F\\u0002\\u0002\\u022f\",\r\n    \"\\u0230\\u0007c\\u0002\\u0002\\u0230\\u0231\\u0007p\\u0002\\u0002\\u0231\\u0233\",\r\n    \"\\u0007f\\u0002\\u0002\\u0232\\u022c\\u0003\\u0002\\u0002\\u0002\\u0232\\u022f\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0233P\\u0003\\u0002\\u0002\\u0002\\u0234\\u0235\",\r\n    \"\\u0007Q\\u0002\\u0002\\u0235\\u0239\\u0007T\\u0002\\u0002\\u0236\\u0237\\u0007\",\r\n    \"q\\u0002\\u0002\\u0237\\u0239\\u0007t\\u0002\\u0002\\u0238\\u0234\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0238\\u0236\\u0003\\u0002\\u0002\\u0002\\u0239R\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u023a\\u023b\\u0007Z\\u0002\\u0002\\u023b\\u023c\\u0007Q\\u0002\",\r\n    \"\\u0002\\u023c\\u0241\\u0007T\\u0002\\u0002\\u023d\\u023e\\u0007z\\u0002\\u0002\",\r\n    \"\\u023e\\u023f\\u0007q\\u0002\\u0002\\u023f\\u0241\\u0007t\\u0002\\u0002\\u0240\",\r\n    \"\\u023a\\u0003\\u0002\\u0002\\u0002\\u0240\\u023d\\u0003\\u0002\\u0002\\u0002\\u0241\",\r\n    \"T\\u0003\\u0002\\u0002\\u0002\\u0242\\u0243\\u0007-\\u0002\\u0002\\u0243V\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0244\\u0245\\u0007/\\u0002\\u0002\\u0245X\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0246\\u0247\\u0007,\\u0002\\u0002\\u0247Z\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0248\\u0249\\u00071\\u0002\\u0002\\u0249\\\\\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u024a\\u024b\\u0007\\'\\u0002\\u0002\\u024b^\\u0003\\u0002\\u0002\\u0002\\u024c\",\r\n    \"\\u024d\\u0007p\\u0002\\u0002\\u024d\\u024e\\u0007w\\u0002\\u0002\\u024e\\u024f\",\r\n    \"\\u0007n\\u0002\\u0002\\u024f\\u0255\\u0007n\\u0002\\u0002\\u0250\\u0251\\u0007\",\r\n    \"P\\u0002\\u0002\\u0251\\u0252\\u0007W\\u0002\\u0002\\u0252\\u0253\\u0007N\\u0002\",\r\n    \"\\u0002\\u0253\\u0255\\u0007N\\u0002\\u0002\\u0254\\u024c\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0254\\u0250\\u0003\\u0002\\u0002\\u0002\\u0255`\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0256\\u0257\\u0007k\\u0002\\u0002\\u0257\\u025b\\u0007p\\u0002\\u0002\",\r\n    \"\\u0258\\u0259\\u0007K\\u0002\\u0002\\u0259\\u025b\\u0007P\\u0002\\u0002\\u025a\",\r\n    \"\\u0256\\u0003\\u0002\\u0002\\u0002\\u025a\\u0258\\u0003\\u0002\\u0002\\u0002\\u025b\",\r\n    \"b\\u0003\\u0002\\u0002\\u0002\\u025c\\u025d\\u0007p\\u0002\\u0002\\u025d\\u025e\",\r\n    \"\\u0007q\\u0002\\u0002\\u025e\\u025f\\u0007v\\u0002\\u0002\\u025f\\u0260\\u0007\",\r\n    \"\\\"\\u0002\\u0002\\u0260\\u0261\\u0007k\\u0002\\u0002\\u0261\\u0269\\u0007p\\u0002\",\r\n    \"\\u0002\\u0262\\u0263\\u0007P\\u0002\\u0002\\u0263\\u0264\\u0007Q\\u0002\\u0002\",\r\n    \"\\u0264\\u0265\\u0007V\\u0002\\u0002\\u0265\\u0266\\u0007\\\"\\u0002\\u0002\\u0266\",\r\n    \"\\u0267\\u0007K\\u0002\\u0002\\u0267\\u0269\\u0007P\\u0002\\u0002\\u0268\\u025c\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0268\\u0262\\u0003\\u0002\\u0002\\u0002\\u0269d\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u026a\\u026b\\u0007q\\u0002\\u0002\\u026b\\u026c\",\r\n    \"\\u0007t\\u0002\\u0002\\u026c\\u026d\\u0007f\\u0002\\u0002\\u026d\\u026e\\u0007\",\r\n    \"g\\u0002\\u0002\\u026e\\u026f\\u0007t\\u0002\\u0002\\u026f\\u0270\\u0007\\\"\\u0002\",\r\n    \"\\u0002\\u0270\\u0271\\u0007d\\u0002\\u0002\\u0271\\u027b\\u0007{\\u0002\\u0002\",\r\n    \"\\u0272\\u0273\\u0007Q\\u0002\\u0002\\u0273\\u0274\\u0007T\\u0002\\u0002\\u0274\",\r\n    \"\\u0275\\u0007F\\u0002\\u0002\\u0275\\u0276\\u0007G\\u0002\\u0002\\u0276\\u0277\",\r\n    \"\\u0007T\\u0002\\u0002\\u0277\\u0278\\u0007\\\"\\u0002\\u0002\\u0278\\u0279\\u0007\",\r\n    \"D\\u0002\\u0002\\u0279\\u027b\\u0007[\\u0002\\u0002\\u027a\\u026a\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u027a\\u0272\\u0003\\u0002\\u0002\\u0002\\u027bf\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u027c\\u027d\\u0007c\\u0002\\u0002\\u027d\\u027e\\u0007u\\u0002\",\r\n    \"\\u0002\\u027e\\u0283\\u0007e\\u0002\\u0002\\u027f\\u0280\\u0007C\\u0002\\u0002\",\r\n    \"\\u0280\\u0281\\u0007U\\u0002\\u0002\\u0281\\u0283\\u0007E\\u0002\\u0002\\u0282\",\r\n    \"\\u027c\\u0003\\u0002\\u0002\\u0002\\u0282\\u027f\\u0003\\u0002\\u0002\\u0002\\u0283\",\r\n    \"h\\u0003\\u0002\\u0002\\u0002\\u0284\\u0285\\u0007f\\u0002\\u0002\\u0285\\u0286\",\r\n    \"\\u0007g\\u0002\\u0002\\u0286\\u0287\\u0007u\\u0002\\u0002\\u0287\\u028d\\u0007\",\r\n    \"e\\u0002\\u0002\\u0288\\u0289\\u0007F\\u0002\\u0002\\u0289\\u028a\\u0007G\\u0002\",\r\n    \"\\u0002\\u028a\\u028b\\u0007U\\u0002\\u0002\\u028b\\u028d\\u0007E\\u0002\\u0002\",\r\n    \"\\u028c\\u0284\\u0003\\u0002\\u0002\\u0002\\u028c\\u0288\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u028dj\\u0003\\u0002\\u0002\\u0002\\u028e\\u028f\\u0007k\\u0002\\u0002\\u028f\",\r\n    \"\\u0290\\u0007u\\u0002\\u0002\\u0290\\u0291\\u0007u\\u0002\\u0002\\u0291\\u0292\",\r\n    \"\\u0007w\\u0002\\u0002\\u0292\\u0299\\u0007g\\u0002\\u0002\\u0293\\u0294\\u0007\",\r\n    \"K\\u0002\\u0002\\u0294\\u0295\\u0007U\\u0002\\u0002\\u0295\\u0296\\u0007U\\u0002\",\r\n    \"\\u0002\\u0296\\u0297\\u0007W\\u0002\\u0002\\u0297\\u0299\\u0007G\\u0002\\u0002\",\r\n    \"\\u0298\\u028e\\u0003\\u0002\\u0002\\u0002\\u0298\\u0293\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0299l\\u0003\\u0002\\u0002\\u0002\\u029a\\u029b\\u0007u\\u0002\\u0002\\u029b\",\r\n    \"\\u029c\\u0007c\\u0002\\u0002\\u029c\\u029d\\u0007v\\u0002\\u0002\\u029d\\u029e\",\r\n    \"\\u0007k\\u0002\\u0002\\u029e\\u029f\\u0007u\\u0002\\u0002\\u029f\\u02a0\\u0007\",\r\n    \"h\\u0002\\u0002\\u02a0\\u02a9\\u0007{\\u0002\\u0002\\u02a1\\u02a2\\u0007U\\u0002\",\r\n    \"\\u0002\\u02a2\\u02a3\\u0007C\\u0002\\u0002\\u02a3\\u02a4\\u0007V\\u0002\\u0002\",\r\n    \"\\u02a4\\u02a5\\u0007K\\u0002\\u0002\\u02a5\\u02a6\\u0007U\\u0002\\u0002\\u02a6\",\r\n    \"\\u02a7\\u0007H\\u0002\\u0002\\u02a7\\u02a9\\u0007[\\u0002\\u0002\\u02a8\\u029a\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02a8\\u02a1\\u0003\\u0002\\u0002\\u0002\\u02a9n\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02aa\\u02ab\\u0007g\\u0002\\u0002\\u02ab\\u02ac\",\r\n    \"\\u0007z\\u0002\\u0002\\u02ac\\u02ad\\u0007k\\u0002\\u0002\\u02ad\\u02ae\\u0007\",\r\n    \"u\\u0002\\u0002\\u02ae\\u02af\\u0007v\\u0002\\u0002\\u02af\\u02b7\\u0007u\\u0002\",\r\n    \"\\u0002\\u02b0\\u02b1\\u0007G\\u0002\\u0002\\u02b1\\u02b2\\u0007Z\\u0002\\u0002\",\r\n    \"\\u02b2\\u02b3\\u0007K\\u0002\\u0002\\u02b3\\u02b4\\u0007U\\u0002\\u0002\\u02b4\",\r\n    \"\\u02b5\\u0007V\\u0002\\u0002\\u02b5\\u02b7\\u0007U\\u0002\\u0002\\u02b6\\u02aa\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02b6\\u02b0\\u0003\\u0002\\u0002\\u0002\\u02b7p\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02b8\\u02c1\\u00072\\u0002\\u0002\\u02b9\\u02bd\",\r\n    \"\\t\\u0003\\u0002\\u0002\\u02ba\\u02bc\\u0005\\u0003\\u0002\\u0002\\u02bb\\u02ba\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02bc\\u02bf\\u0003\\u0002\\u0002\\u0002\\u02bd\\u02bb\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02bd\\u02be\\u0003\\u0002\\u0002\\u0002\\u02be\\u02c1\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02bf\\u02bd\\u0003\\u0002\\u0002\\u0002\\u02c0\\u02b8\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02c0\\u02b9\\u0003\\u0002\\u0002\\u0002\\u02c1r\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02c2\\u02cb\\u00072\\u0002\\u0002\\u02c3\\u02c7\",\r\n    \"\\t\\u0003\\u0002\\u0002\\u02c4\\u02c6\\u0005\\u0003\\u0002\\u0002\\u02c5\\u02c4\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02c6\\u02c9\\u0003\\u0002\\u0002\\u0002\\u02c7\\u02c5\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02c7\\u02c8\\u0003\\u0002\\u0002\\u0002\\u02c8\\u02cb\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02c9\\u02c7\\u0003\\u0002\\u0002\\u0002\\u02ca\\u02c2\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02ca\\u02c3\\u0003\\u0002\\u0002\\u0002\\u02cb\\u02d2\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02cc\\u02ce\\u0005\\'\\u0014\\u0002\\u02cd\\u02cf\",\r\n    \"\\u0005\\u0003\\u0002\\u0002\\u02ce\\u02cd\\u0003\\u0002\\u0002\\u0002\\u02cf\\u02d0\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02d0\\u02ce\\u0003\\u0002\\u0002\\u0002\\u02d0\\u02d1\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02d1\\u02d3\\u0003\\u0002\\u0002\\u0002\\u02d2\\u02cc\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02d2\\u02d3\\u0003\\u0002\\u0002\\u0002\\u02d3\\u02d5\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02d4\\u02d6\\u0005\\u0013\\n\\u0002\\u02d5\\u02d4\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02d5\\u02d6\\u0003\\u0002\\u0002\\u0002\\u02d6t\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02d7\\u02e7\\u0005\\u0005\\u0003\\u0002\\u02d8\\u02da\",\r\n    \"\\u0005\\u0015\\u000b\\u0002\\u02d9\\u02d8\\u0003\\u0002\\u0002\\u0002\\u02da\\u02db\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02db\\u02d9\\u0003\\u0002\\u0002\\u0002\\u02db\\u02dc\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02dc\\u02dd\\u0003\\u0002\\u0002\\u0002\\u02dd\\u02de\",\r\n    \"\\u0005\\u0005\\u0003\\u0002\\u02de\\u02e7\\u0003\\u0002\\u0002\\u0002\\u02df\\u02e1\",\r\n    \"\\u0005\\u0015\\u000b\\u0002\\u02e0\\u02df\\u0003\\u0002\\u0002\\u0002\\u02e1\\u02e2\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02e2\\u02e0\\u0003\\u0002\\u0002\\u0002\\u02e2\\u02e3\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02e3\\u02e4\\u0003\\u0002\\u0002\\u0002\\u02e4\\u02e5\",\r\n    \"\\u0005\\u0003\\u0002\\u0002\\u02e5\\u02e7\\u0003\\u0002\\u0002\\u0002\\u02e6\\u02d7\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02e6\\u02d9\\u0003\\u0002\\u0002\\u0002\\u02e6\\u02e0\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02e7\\u02ed\\u0003\\u0002\\u0002\\u0002\\u02e8\\u02ec\",\r\n    \"\\u0005\\u0005\\u0003\\u0002\\u02e9\\u02ec\\u0005\\u0015\\u000b\\u0002\\u02ea\\u02ec\",\r\n    \"\\u0005\\u0003\\u0002\\u0002\\u02eb\\u02e8\\u0003\\u0002\\u0002\\u0002\\u02eb\\u02e9\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02eb\\u02ea\\u0003\\u0002\\u0002\\u0002\\u02ec\\u02ef\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02ed\\u02eb\\u0003\\u0002\\u0002\\u0002\\u02ed\\u02ee\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02eev\\u0003\\u0002\\u0002\\u0002\\u02ef\\u02ed\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u02f0\\u02f8\\u0007b\\u0002\\u0002\\u02f1\\u02f2\",\r\n    \"\\u0007^\\u0002\\u0002\\u02f2\\u02f7\\u0007b\\u0002\\u0002\\u02f3\\u02f4\\u0007\",\r\n    \"^\\u0002\\u0002\\u02f4\\u02f7\\u0007^\\u0002\\u0002\\u02f5\\u02f7\\n\\n\\u0002\\u0002\",\r\n    \"\\u02f6\\u02f1\\u0003\\u0002\\u0002\\u0002\\u02f6\\u02f3\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u02f6\\u02f5\\u0003\\u0002\\u0002\\u0002\\u02f7\\u02fa\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u02f8\\u02f9\\u0003\\u0002\\u0002\\u0002\\u02f8\\u02f6\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u02f9\\u02fb\\u0003\\u0002\\u0002\\u0002\\u02fa\\u02f8\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u02fb\\u02fc\\u0007b\\u0002\\u0002\\u02fcx\\u0003\\u0002\\u0002\\u0002\\u02fd\",\r\n    \"\\u02fe\\u0005q9\\u0002\\u02fe\\u02ff\\u0007o\\u0002\\u0002\\u02ff\\u0300\\u0007\",\r\n    \"u\\u0002\\u0002\\u0300z\\u0003\\u0002\\u0002\\u0002\\u0301\\u0302\\u0005q9\\u0002\",\r\n    \"\\u0302\\u0303\\u0007u\\u0002\\u0002\\u0303|\\u0003\\u0002\\u0002\\u0002\\u0304\",\r\n    \"\\u0305\\u0005q9\\u0002\\u0305\\u0306\\u0007o\\u0002\\u0002\\u0306~\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0307\\u0308\\u0005q9\\u0002\\u0308\\u0309\\u0007j\\u0002\\u0002\",\r\n    \"\\u0309\\u0080\\u0003\\u0002\\u0002\\u0002\\u030a\\u030b\\u0005q9\\u0002\\u030b\",\r\n    \"\\u030c\\u0007f\\u0002\\u0002\\u030c\\u0082\\u0003\\u0002\\u0002\\u0002\\u030d\",\r\n    \"\\u030e\\u0005q9\\u0002\\u030e\\u030f\\u0007y\\u0002\\u0002\\u030f\\u0084\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0310\\u0311\\u0007)\\u0002\\u0002\\u0311\\u0312\\u0005\",\r\n    \"\\u0007\\u0004\\u0002\\u0312\\u0313\\u0007/\\u0002\\u0002\\u0313\\u0314\\u0005\",\r\n    \"\\t\\u0005\\u0002\\u0314\\u0315\\u0007/\\u0002\\u0002\\u0315\\u0316\\u0005\\u000b\",\r\n    \"\\u0006\\u0002\\u0316\\u0317\\u0007)\\u0002\\u0002\\u0317\\u0086\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0318\\u0319\\u0007)\\u0002\\u0002\\u0319\\u031a\\u0005\\u0007\",\r\n    \"\\u0004\\u0002\\u031a\\u031b\\u0005W,\\u0002\\u031b\\u031c\\u0005\\t\\u0005\\u0002\",\r\n    \"\\u031c\\u031d\\u0005W,\\u0002\\u031d\\u031e\\u0005\\u000b\\u0006\\u0002\\u031e\",\r\n    \"\\u031f\\t\\u000b\\u0002\\u0002\\u031f\\u0320\\u0005\\r\\u0007\\u0002\\u0320\\u0321\",\r\n    \"\\u0005#\\u0012\\u0002\\u0321\\u0329\\u0005\\u000f\\b\\u0002\\u0322\\u0323\\u0005\",\r\n    \"#\\u0012\\u0002\\u0323\\u0327\\u0005\\u000f\\b\\u0002\\u0324\\u0325\\u0005\\'\\u0014\",\r\n    \"\\u0002\\u0325\\u0326\\u0005\\u0011\\t\\u0002\\u0326\\u0328\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0327\\u0324\\u0003\\u0002\\u0002\\u0002\\u0327\\u0328\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0328\\u032a\\u0003\\u0002\\u0002\\u0002\\u0329\\u0322\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0329\\u032a\\u0003\\u0002\\u0002\\u0002\\u032a\\u032b\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u032b\\u032c\\u0007)\\u0002\\u0002\\u032c\\u0088\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u032d\\u0335\\u0007$\\u0002\\u0002\\u032e\\u032f\\u0007^\\u0002\\u0002\",\r\n    \"\\u032f\\u0334\\u0007$\\u0002\\u0002\\u0330\\u0331\\u0007^\\u0002\\u0002\\u0331\",\r\n    \"\\u0334\\u0007^\\u0002\\u0002\\u0332\\u0334\\n\\f\\u0002\\u0002\\u0333\\u032e\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0333\\u0330\\u0003\\u0002\\u0002\\u0002\\u0333\\u0332\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0334\\u0337\\u0003\\u0002\\u0002\\u0002\\u0335\\u0336\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0335\\u0333\\u0003\\u0002\\u0002\\u0002\\u0336\\u0338\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0337\\u0335\\u0003\\u0002\\u0002\\u0002\\u0338\\u0346\\u0007\",\r\n    \"$\\u0002\\u0002\\u0339\\u0341\\u0007)\\u0002\\u0002\\u033a\\u033b\\u0007^\\u0002\",\r\n    \"\\u0002\\u033b\\u0340\\u0007)\\u0002\\u0002\\u033c\\u033d\\u0007^\\u0002\\u0002\",\r\n    \"\\u033d\\u0340\\u0007^\\u0002\\u0002\\u033e\\u0340\\n\\r\\u0002\\u0002\\u033f\\u033a\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u033f\\u033c\\u0003\\u0002\\u0002\\u0002\\u033f\\u033e\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0340\\u0343\\u0003\\u0002\\u0002\\u0002\\u0341\\u0342\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0341\\u033f\\u0003\\u0002\\u0002\\u0002\\u0342\\u0344\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0343\\u0341\\u0003\\u0002\\u0002\\u0002\\u0344\\u0346\",\r\n    \"\\u0007)\\u0002\\u0002\\u0345\\u032d\\u0003\\u0002\\u0002\\u0002\\u0345\\u0339\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0346\\u008a\\u0003\\u0002\\u0002\\u0002\\u0347\\u0348\",\r\n    \"\\t\\u000e\\u0002\\u0002\\u0348\\u0349\\u0003\\u0002\\u0002\\u0002\\u0349\\u034a\",\r\n    \"\\bF\\u0002\\u0002\\u034a\\u008c\\u0003\\u0002\\u0002\\u0002<\\u0002\\u009a\\u00a0\",\r\n    \"\\u00a6\\u00b2\\u00b6\\u00bb\\u00d7\\u00e1\\u00ed\\u00fd\\u0112\\u0130\\u0145\\u015e\",\r\n    \"\\u018a\\u01b0\\u01c9\\u01d7\\u01f2\\u01fa\\u0208\\u0216\\u0222\\u022a\\u0232\\u0238\",\r\n    \"\\u0240\\u0254\\u025a\\u0268\\u027a\\u0282\\u028c\\u0298\\u02a8\\u02b6\\u02bd\\u02c0\",\r\n    \"\\u02c7\\u02ca\\u02d0\\u02d2\\u02d5\\u02db\\u02e2\\u02e6\\u02eb\\u02ed\\u02f6\\u02f8\",\r\n    \"\\u0327\\u0329\\u0333\\u0335\\u033f\\u0341\\u0345\\u0003\\u0002\\u0003\\u0002\"].join(\"\");\r\n\r\n\r\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\r\n\r\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\r\n\r\nexport default class NqlLexer extends antlr4.Lexer {\r\n\r\n    static grammarFileName = \"NqlLexer.g4\";\r\n    static channelNames = [ \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\" ];\r\n\tstatic modeNames = [ \"DEFAULT_MODE\" ];\r\n\tstatic literalNames = [ null, \"'_'\", \"'('\", \"')'\", \"'['\", \"']'\", \"'|'\", \r\n                         \"'?'\", \"':'\", \"';'\", \"'.'\", \"','\", null, null, \r\n                         null, null, null, null, null, null, null, null, \r\n                         null, null, null, null, null, null, null, null, \r\n                         null, null, null, \"'+'\", \"'-'\", \"'*'\", \"'/'\", \"'%'\" ];\r\n\tstatic symbolicNames = [ null, \"UNDERSCORE\", \"LP\", \"RP\", \"LB\", \"RB\", \"PIPE\", \r\n                          \"QUESTION\", \"COLON\", \"SEMI_COLON\", \"DOT\", \"COMMA\", \r\n                          \"AS\", \"TRUE\", \"FALSE\", \"BETWEEN\", \"EQUALS\", \"NOT_EQUALS\", \r\n                          \"GREATER\", \"LESS\", \"GREATER_EQUALS\", \"LESS_EQUALS\", \r\n                          \"REGEX_MATCH\", \"MATCH\", \"EXACTLY_MATCH\", \"WAS\", \r\n                          \"DURING\", \"BEFORE\", \"AFTER\", \"NOT\", \"AND\", \"OR\", \r\n                          \"XOR\", \"ADD\", \"SUBTRACT\", \"MULTIPLY\", \"DIVIDE\", \r\n                          \"MOD\", \"NULL\", \"IN\", \"NOT_IN\", \"ORDERBY\", \"ASC\", \r\n                          \"DESC\", \"ISSUE\", \"SATISFY\", \"EXISTS\", \"UNSIGN\", \r\n                          \"DECIMAL\", \"ID\", \"KEY\", \"MILLIS\", \"SECONDS\", \"MINUTES\", \r\n                          \"HOURS\", \"DAYS\", \"WEEKS\", \"DATE\", \"DATETIME\", \r\n                          \"STRING\", \"WS\" ];\r\n\tstatic ruleNames = [ \"DIGIT\", \"ALPHA\", \"YEAR\", \"MONTH\", \"DAY\", \"HOUR\", \r\n                      \"SIXTY_VALUES\", \"MILLISECOND\", \"EXPONENT\", \"UNDERSCORE\", \r\n                      \"LP\", \"RP\", \"LB\", \"RB\", \"PIPE\", \"QUESTION\", \"COLON\", \r\n                      \"SEMI_COLON\", \"DOT\", \"COMMA\", \"AS\", \"TRUE\", \"FALSE\", \r\n                      \"BETWEEN\", \"EQUALS\", \"NOT_EQUALS\", \"GREATER\", \"LESS\", \r\n                      \"GREATER_EQUALS\", \"LESS_EQUALS\", \"REGEX_MATCH\", \"MATCH\", \r\n                      \"EXACTLY_MATCH\", \"WAS\", \"DURING\", \"BEFORE\", \"AFTER\", \r\n                      \"NOT\", \"AND\", \"OR\", \"XOR\", \"ADD\", \"SUBTRACT\", \"MULTIPLY\", \r\n                      \"DIVIDE\", \"MOD\", \"NULL\", \"IN\", \"NOT_IN\", \"ORDERBY\", \r\n                      \"ASC\", \"DESC\", \"ISSUE\", \"SATISFY\", \"EXISTS\", \"UNSIGN\", \r\n                      \"DECIMAL\", \"ID\", \"KEY\", \"MILLIS\", \"SECONDS\", \"MINUTES\", \r\n                      \"HOURS\", \"DAYS\", \"WEEKS\", \"DATE\", \"DATETIME\", \"STRING\", \r\n                      \"WS\" ];\r\n\r\n    constructor(input) {\r\n        super(input)\r\n        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\r\n    }\r\n\r\n    get atn() {\r\n        return atn;\r\n    }\r\n}\r\n\r\nNqlLexer.EOF = antlr4.Token.EOF;\r\nNqlLexer.UNDERSCORE = 1;\r\nNqlLexer.LP = 2;\r\nNqlLexer.RP = 3;\r\nNqlLexer.LB = 4;\r\nNqlLexer.RB = 5;\r\nNqlLexer.PIPE = 6;\r\nNqlLexer.QUESTION = 7;\r\nNqlLexer.COLON = 8;\r\nNqlLexer.SEMI_COLON = 9;\r\nNqlLexer.DOT = 10;\r\nNqlLexer.COMMA = 11;\r\nNqlLexer.AS = 12;\r\nNqlLexer.TRUE = 13;\r\nNqlLexer.FALSE = 14;\r\nNqlLexer.BETWEEN = 15;\r\nNqlLexer.EQUALS = 16;\r\nNqlLexer.NOT_EQUALS = 17;\r\nNqlLexer.GREATER = 18;\r\nNqlLexer.LESS = 19;\r\nNqlLexer.GREATER_EQUALS = 20;\r\nNqlLexer.LESS_EQUALS = 21;\r\nNqlLexer.REGEX_MATCH = 22;\r\nNqlLexer.MATCH = 23;\r\nNqlLexer.EXACTLY_MATCH = 24;\r\nNqlLexer.WAS = 25;\r\nNqlLexer.DURING = 26;\r\nNqlLexer.BEFORE = 27;\r\nNqlLexer.AFTER = 28;\r\nNqlLexer.NOT = 29;\r\nNqlLexer.AND = 30;\r\nNqlLexer.OR = 31;\r\nNqlLexer.XOR = 32;\r\nNqlLexer.ADD = 33;\r\nNqlLexer.SUBTRACT = 34;\r\nNqlLexer.MULTIPLY = 35;\r\nNqlLexer.DIVIDE = 36;\r\nNqlLexer.MOD = 37;\r\nNqlLexer.NULL = 38;\r\nNqlLexer.IN = 39;\r\nNqlLexer.NOT_IN = 40;\r\nNqlLexer.ORDERBY = 41;\r\nNqlLexer.ASC = 42;\r\nNqlLexer.DESC = 43;\r\nNqlLexer.ISSUE = 44;\r\nNqlLexer.SATISFY = 45;\r\nNqlLexer.EXISTS = 46;\r\nNqlLexer.UNSIGN = 47;\r\nNqlLexer.DECIMAL = 48;\r\nNqlLexer.ID = 49;\r\nNqlLexer.KEY = 50;\r\nNqlLexer.MILLIS = 51;\r\nNqlLexer.SECONDS = 52;\r\nNqlLexer.MINUTES = 53;\r\nNqlLexer.HOURS = 54;\r\nNqlLexer.DAYS = 55;\r\nNqlLexer.WEEKS = 56;\r\nNqlLexer.DATE = 57;\r\nNqlLexer.DATETIME = 58;\r\nNqlLexer.STRING = 59;\r\nNqlLexer.WS = 60;\r\n\r\n\r\n\r\n","D:\\ANTLR\\antlr\\src\\Grammar\\NqlParserListener.js",[],["127","128"],"D:\\ANTLR\\antlr\\src\\ClassStore.js",["129","130","131","132","133","134","135"],"import {\r\n    ATNState,\r\n    BasicBlockStartState,\r\n    BasicState,\r\n    BlockEndState,\r\n    LoopEndState,\r\n    PlusBlockStartState,\r\n    PlusLoopbackState,\r\n    RuleStartState,\r\n    RuleStopState,\r\n    StarBlockStartState,\r\n    StarLoopEntryState,\r\n    StarLoopbackState,\r\n  } from \"antlr4/src/antlr4/atn/ATNState\";\r\n  \r\n  import {EpsilonTransition, RuleTransition, AtomTransition, SetTransition, ActionTransition, PrecedencePredicateTransition} from 'antlr4/src/antlr4/atn/Transition'\r\n  \r\n  \r\n  import {CommonToken} from 'antlr4/src/antlr4/Token'\r\n\r\nexport class ParserStack {\r\n    constructor(states) {\r\n      this.states = states ? states : []\r\n    }\r\n\r\n    removeLastState = () => {\r\n      const cloneState = [...this.states]\r\n      cloneState.pop()\r\n      console.log('stateeeeeeeeeeeeeeeee', this.states)\r\n      return cloneState;\r\n    };\r\n  \r\n    addState = (state) => {\r\n      return [...this.states, state];\r\n    };\r\n  \r\n    process = (state) => {\r\n      if (\r\n        state instanceof RuleStartState || //\r\n        state instanceof StarBlockStartState || //\r\n        state instanceof BasicBlockStartState || //\r\n        state instanceof PlusBlockStartState || //\r\n        state instanceof StarLoopEntryState\r\n      ) {\r\n        return {\r\n          status: true,\r\n          states: new ParserStack(this.addState(state)),\r\n        };\r\n      }\r\n      let size = this.states.length;\r\n      let last = this.states[size - 1];\r\n  \r\n      if (state instanceof BlockEndState) {\r\n        if (last === state.startState)\r\n          return {\r\n            status: true,\r\n            states: new ParserStack(this.removeLastState()),\r\n          };\r\n        return {\r\n          status: false,\r\n          states: this,\r\n        };\r\n      } else if (state instanceof LoopEndState) {\r\n        const _state = state;\r\n        const cont =\r\n          last instanceof StarLoopEntryState &&\r\n          last.loopBackState === _state.loopBackState;\r\n        if (!cont)\r\n          return {\r\n            status: false,\r\n            states: this,\r\n          };\r\n        return {\r\n          status: true,\r\n          states: new ParserStack(this.removeLastState()),\r\n        };\r\n      } else if (state instanceof RuleStopState) {\r\n        const cont = last instanceof RuleStartState && last.stopState === state;\r\n        if (cont)\r\n          return {\r\n            status: true,\r\n            states: new ParserStack(this.removeLastState()),\r\n          };\r\n        return {\r\n          status: false,\r\n          states: this,\r\n        };\r\n      } else if (\r\n        state instanceof BasicState || //\r\n        state instanceof BlockEndState || //\r\n        state instanceof StarLoopbackState || //\r\n        state instanceof PlusLoopbackState\r\n      )\r\n        return {\r\n          status: true,\r\n          states: this,\r\n        };\r\n    };\r\n  }\r\n\r\n export class TokenStream {\r\n    constructor(tokens, cursors) {\r\n      this.tokens = tokens\r\n      this.cursors = cursors ? cursors : 0\r\n      this.UNKNOWN = new CommonToken(undefined, -1);\r\n    }\r\n\r\n    next() {\r\n      console.log('cursorrrrrrrrs', this.cursors)\r\n\r\n      if(this.cursors >= this.tokens.length){\r\n        return this.UNKNOWN\r\n      }\r\n      return this.tokens[this.cursors]\r\n    }\r\n\r\n    atCaret() {\r\n      const test = this.next();\r\n      console.log('testtt', test)\r\n\r\n      return test.type < 0;\r\n    }\r\n    move() {\r\n      return new TokenStream(this.tokens, this.cursors + 1)\r\n    }\r\n  }\r\n\r\n export class Collector {\r\n    constructor() {\r\n      this.collected = new Set()\r\n    }\r\n\r\n    collect(type) {\r\n      this.collected.add(type)\r\n    }\r\n\r\n    getCollected() {\r\n      return this.collected\r\n    }\r\n  }",{"ruleId":"136","severity":1,"message":"137","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":25},{"ruleId":"136","severity":1,"message":"140","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":16},{"ruleId":"136","severity":1,"message":"141","line":9,"column":8,"nodeType":"138","messageId":"139","endLine":9,"endColumn":19},{"ruleId":"136","severity":1,"message":"142","line":12,"column":3,"nodeType":"138","messageId":"139","endLine":12,"endColumn":11},{"ruleId":"136","severity":1,"message":"143","line":40,"column":9,"nodeType":"138","messageId":"139","endLine":40,"endColumn":18},{"ruleId":"136","severity":1,"message":"144","line":48,"column":10,"nodeType":"138","messageId":"139","endLine":48,"endColumn":15},{"ruleId":"136","severity":1,"message":"145","line":181,"column":11,"nodeType":"138","messageId":"139","endLine":181,"endColumn":21},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":60,"column":30,"nodeType":"152","messageId":"153","endLine":60,"endColumn":31,"suggestions":"154"},{"ruleId":"150","severity":1,"message":"151","line":61,"column":13,"nodeType":"152","messageId":"153","endLine":61,"endColumn":14,"suggestions":"155"},{"ruleId":"150","severity":1,"message":"151","line":147,"column":6,"nodeType":"152","messageId":"153","endLine":147,"endColumn":7,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":238,"column":13,"nodeType":"159","messageId":"160","endLine":238,"endColumn":58},{"ruleId":"157","severity":1,"message":"158","line":247,"column":8,"nodeType":"159","messageId":"160","endLine":247,"endColumn":53},{"ruleId":"157","severity":1,"message":"158","line":264,"column":8,"nodeType":"159","messageId":"160","endLine":264,"endColumn":53},{"ruleId":"161","severity":1,"message":"162","line":358,"column":10,"nodeType":"163","messageId":"164","endLine":398,"endColumn":11},{"ruleId":"165","severity":1,"message":"166","line":403,"column":20,"nodeType":"167","messageId":"168","endLine":403,"endColumn":22},{"ruleId":"165","severity":1,"message":"166","line":403,"column":31,"nodeType":"167","messageId":"168","endLine":403,"endColumn":33},{"ruleId":"161","severity":1,"message":"162","line":505,"column":10,"nodeType":"163","messageId":"164","endLine":620,"endColumn":11},{"ruleId":"165","severity":1,"message":"169","line":524,"column":34,"nodeType":"167","messageId":"168","endLine":524,"endColumn":36},{"ruleId":"161","severity":1,"message":"162","line":645,"column":10,"nodeType":"163","messageId":"164","endLine":783,"endColumn":11},{"ruleId":"161","severity":1,"message":"162","line":815,"column":10,"nodeType":"163","messageId":"164","endLine":917,"endColumn":11},{"ruleId":"165","severity":1,"message":"166","line":922,"column":20,"nodeType":"167","messageId":"168","endLine":922,"endColumn":22},{"ruleId":"165","severity":1,"message":"166","line":922,"column":31,"nodeType":"167","messageId":"168","endLine":922,"endColumn":33},{"ruleId":"170","severity":1,"message":"171","line":930,"column":22,"nodeType":"138","messageId":"172","endLine":930,"endColumn":25},{"ruleId":"161","severity":1,"message":"162","line":931,"column":18,"nodeType":"163","messageId":"164","endLine":1002,"endColumn":19},{"ruleId":"165","severity":1,"message":"169","line":1038,"column":30,"nodeType":"167","messageId":"168","endLine":1038,"endColumn":32},{"ruleId":"165","severity":1,"message":"169","line":1038,"column":180,"nodeType":"167","messageId":"168","endLine":1038,"endColumn":182},{"ruleId":"165","severity":1,"message":"166","line":1086,"column":20,"nodeType":"167","messageId":"168","endLine":1086,"endColumn":22},{"ruleId":"165","severity":1,"message":"166","line":1086,"column":31,"nodeType":"167","messageId":"168","endLine":1086,"endColumn":33},{"ruleId":"165","severity":1,"message":"169","line":1215,"column":88,"nodeType":"167","messageId":"168","endLine":1215,"endColumn":90},{"ruleId":"165","severity":1,"message":"169","line":1277,"column":32,"nodeType":"167","messageId":"168","endLine":1277,"endColumn":34},{"ruleId":"165","severity":1,"message":"169","line":1339,"column":32,"nodeType":"167","messageId":"168","endLine":1339,"endColumn":34},{"ruleId":"146","replacedBy":"173"},{"ruleId":"148","replacedBy":"174"},{"ruleId":"146","replacedBy":"175"},{"ruleId":"148","replacedBy":"176"},{"ruleId":"150","severity":1,"message":"151","line":60,"column":30,"nodeType":"152","messageId":"153","endLine":60,"endColumn":31,"suggestions":"177"},{"ruleId":"150","severity":1,"message":"151","line":61,"column":13,"nodeType":"152","messageId":"153","endLine":61,"endColumn":14,"suggestions":"178"},{"ruleId":"150","severity":1,"message":"151","line":147,"column":6,"nodeType":"152","messageId":"153","endLine":147,"endColumn":7,"suggestions":"179"},{"ruleId":"157","severity":1,"message":"158","line":238,"column":13,"nodeType":"159","messageId":"160","endLine":238,"endColumn":58},{"ruleId":"157","severity":1,"message":"158","line":247,"column":8,"nodeType":"159","messageId":"160","endLine":247,"endColumn":53},{"ruleId":"157","severity":1,"message":"158","line":264,"column":8,"nodeType":"159","messageId":"160","endLine":264,"endColumn":53},{"ruleId":"161","severity":1,"message":"162","line":358,"column":10,"nodeType":"163","messageId":"164","endLine":398,"endColumn":11},{"ruleId":"165","severity":1,"message":"166","line":403,"column":20,"nodeType":"167","messageId":"168","endLine":403,"endColumn":22},{"ruleId":"165","severity":1,"message":"166","line":403,"column":31,"nodeType":"167","messageId":"168","endLine":403,"endColumn":33},{"ruleId":"161","severity":1,"message":"162","line":505,"column":10,"nodeType":"163","messageId":"164","endLine":620,"endColumn":11},{"ruleId":"165","severity":1,"message":"169","line":524,"column":34,"nodeType":"167","messageId":"168","endLine":524,"endColumn":36},{"ruleId":"161","severity":1,"message":"162","line":645,"column":10,"nodeType":"163","messageId":"164","endLine":783,"endColumn":11},{"ruleId":"161","severity":1,"message":"162","line":815,"column":10,"nodeType":"163","messageId":"164","endLine":917,"endColumn":11},{"ruleId":"165","severity":1,"message":"166","line":922,"column":20,"nodeType":"167","messageId":"168","endLine":922,"endColumn":22},{"ruleId":"165","severity":1,"message":"166","line":922,"column":31,"nodeType":"167","messageId":"168","endLine":922,"endColumn":33},{"ruleId":"170","severity":1,"message":"171","line":930,"column":22,"nodeType":"138","messageId":"172","endLine":930,"endColumn":25},{"ruleId":"161","severity":1,"message":"162","line":931,"column":18,"nodeType":"163","messageId":"164","endLine":1002,"endColumn":19},{"ruleId":"165","severity":1,"message":"169","line":1038,"column":30,"nodeType":"167","messageId":"168","endLine":1038,"endColumn":32},{"ruleId":"165","severity":1,"message":"169","line":1038,"column":180,"nodeType":"167","messageId":"168","endLine":1038,"endColumn":182},{"ruleId":"165","severity":1,"message":"166","line":1086,"column":20,"nodeType":"167","messageId":"168","endLine":1086,"endColumn":22},{"ruleId":"165","severity":1,"message":"166","line":1086,"column":31,"nodeType":"167","messageId":"168","endLine":1086,"endColumn":33},{"ruleId":"165","severity":1,"message":"169","line":1215,"column":88,"nodeType":"167","messageId":"168","endLine":1215,"endColumn":90},{"ruleId":"165","severity":1,"message":"169","line":1277,"column":32,"nodeType":"167","messageId":"168","endLine":1277,"endColumn":34},{"ruleId":"165","severity":1,"message":"169","line":1339,"column":32,"nodeType":"167","messageId":"168","endLine":1339,"endColumn":34},{"ruleId":"150","severity":1,"message":"151","line":17,"column":45,"nodeType":"152","messageId":"153","endLine":17,"endColumn":46,"suggestions":"180"},{"ruleId":"150","severity":1,"message":"151","line":17,"column":49,"nodeType":"152","messageId":"153","endLine":17,"endColumn":50,"suggestions":"181"},{"ruleId":"150","severity":1,"message":"151","line":82,"column":64,"nodeType":"152","messageId":"153","endLine":82,"endColumn":65,"suggestions":"182"},{"ruleId":"150","severity":1,"message":"151","line":82,"column":72,"nodeType":"152","messageId":"153","endLine":82,"endColumn":73,"suggestions":"183"},{"ruleId":"150","severity":1,"message":"151","line":83,"column":12,"nodeType":"152","messageId":"153","endLine":83,"endColumn":13,"suggestions":"184"},{"ruleId":"150","severity":1,"message":"151","line":83,"column":20,"nodeType":"152","messageId":"153","endLine":83,"endColumn":21,"suggestions":"185"},{"ruleId":"150","severity":1,"message":"151","line":83,"column":28,"nodeType":"152","messageId":"153","endLine":83,"endColumn":29,"suggestions":"186"},{"ruleId":"150","severity":1,"message":"151","line":83,"column":36,"nodeType":"152","messageId":"153","endLine":83,"endColumn":37,"suggestions":"187"},{"ruleId":"150","severity":1,"message":"151","line":83,"column":44,"nodeType":"152","messageId":"153","endLine":83,"endColumn":45,"suggestions":"188"},{"ruleId":"150","severity":1,"message":"151","line":83,"column":54,"nodeType":"152","messageId":"153","endLine":83,"endColumn":55,"suggestions":"189"},{"ruleId":"150","severity":1,"message":"151","line":116,"column":45,"nodeType":"152","messageId":"153","endLine":116,"endColumn":46,"suggestions":"190"},{"ruleId":"150","severity":1,"message":"151","line":118,"column":57,"nodeType":"152","messageId":"153","endLine":118,"endColumn":58,"suggestions":"191"},{"ruleId":"150","severity":1,"message":"151","line":128,"column":18,"nodeType":"152","messageId":"153","endLine":128,"endColumn":19,"suggestions":"192"},{"ruleId":"150","severity":1,"message":"151","line":160,"column":37,"nodeType":"152","messageId":"153","endLine":160,"endColumn":38,"suggestions":"193"},{"ruleId":"150","severity":1,"message":"151","line":415,"column":24,"nodeType":"152","messageId":"153","endLine":415,"endColumn":25,"suggestions":"194"},{"ruleId":"150","severity":1,"message":"151","line":482,"column":48,"nodeType":"152","messageId":"153","endLine":482,"endColumn":49,"suggestions":"195"},{"ruleId":"150","severity":1,"message":"151","line":530,"column":69,"nodeType":"152","messageId":"153","endLine":530,"endColumn":70,"suggestions":"196"},{"ruleId":"146","replacedBy":"197"},{"ruleId":"148","replacedBy":"198"},{"ruleId":"136","severity":1,"message":"142","line":2,"column":5,"nodeType":"138","messageId":"139","endLine":2,"endColumn":13},{"ruleId":"136","severity":1,"message":"199","line":16,"column":11,"nodeType":"138","messageId":"139","endLine":16,"endColumn":28},{"ruleId":"136","severity":1,"message":"200","line":16,"column":30,"nodeType":"138","messageId":"139","endLine":16,"endColumn":44},{"ruleId":"136","severity":1,"message":"201","line":16,"column":46,"nodeType":"138","messageId":"139","endLine":16,"endColumn":60},{"ruleId":"136","severity":1,"message":"202","line":16,"column":62,"nodeType":"138","messageId":"139","endLine":16,"endColumn":75},{"ruleId":"136","severity":1,"message":"203","line":16,"column":77,"nodeType":"138","messageId":"139","endLine":16,"endColumn":93},{"ruleId":"136","severity":1,"message":"204","line":16,"column":95,"nodeType":"138","messageId":"139","endLine":16,"endColumn":124},"no-unused-vars","'NqlParserListener' is defined but never used.","Identifier","unusedVar","'examples' is defined but never used.","'autosuggest' is defined but never used.","'ATNState' is defined but never used.","'editorRef' is assigned a value but never used.","'caret' is assigned a value but never used.","'collector1' is assigned a value but never used.","no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["207","208"],["209","210"],["211","212"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-redeclare","'la_' is already defined.","redeclared",["205"],["206"],["205"],["206"],["213","214"],["215","216"],["217","218"],["219","220"],["221","222"],["223","224"],["225","226"],["227","228"],["229","230"],["231","232"],["233","234"],["235","236"],["237","238"],["239","240"],["241","242"],["243","244"],["245","246"],["247","248"],["249","250"],["251","252"],["205"],["206"],"'EpsilonTransition' is defined but never used.","'RuleTransition' is defined but never used.","'AtomTransition' is defined but never used.","'SetTransition' is defined but never used.","'ActionTransition' is defined but never used.","'PrecedencePredicateTransition' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"253","fix":"254","desc":"255"},{"messageId":"256","fix":"257","desc":"258"},{"messageId":"253","fix":"259","desc":"255"},{"messageId":"256","fix":"260","desc":"258"},{"messageId":"253","fix":"261","desc":"255"},{"messageId":"256","fix":"262","desc":"258"},{"messageId":"253","fix":"263","desc":"255"},{"messageId":"256","fix":"264","desc":"258"},{"messageId":"253","fix":"265","desc":"255"},{"messageId":"256","fix":"266","desc":"258"},{"messageId":"253","fix":"267","desc":"255"},{"messageId":"256","fix":"268","desc":"258"},{"messageId":"253","fix":"269","desc":"255"},{"messageId":"256","fix":"270","desc":"258"},{"messageId":"253","fix":"271","desc":"255"},{"messageId":"256","fix":"272","desc":"258"},{"messageId":"253","fix":"273","desc":"255"},{"messageId":"256","fix":"274","desc":"258"},{"messageId":"253","fix":"275","desc":"255"},{"messageId":"256","fix":"276","desc":"258"},{"messageId":"253","fix":"277","desc":"255"},{"messageId":"256","fix":"278","desc":"258"},{"messageId":"253","fix":"279","desc":"255"},{"messageId":"256","fix":"280","desc":"258"},{"messageId":"253","fix":"281","desc":"255"},{"messageId":"256","fix":"282","desc":"258"},{"messageId":"253","fix":"283","desc":"255"},{"messageId":"256","fix":"284","desc":"258"},{"messageId":"253","fix":"285","desc":"255"},{"messageId":"256","fix":"286","desc":"258"},{"messageId":"253","fix":"287","desc":"255"},{"messageId":"256","fix":"288","desc":"258"},{"messageId":"253","fix":"289","desc":"255"},{"messageId":"256","fix":"290","desc":"258"},{"messageId":"253","fix":"291","desc":"255"},{"messageId":"256","fix":"292","desc":"258"},{"messageId":"253","fix":"293","desc":"255"},{"messageId":"256","fix":"294","desc":"258"},{"messageId":"253","fix":"295","desc":"255"},{"messageId":"256","fix":"296","desc":"258"},{"messageId":"253","fix":"297","desc":"255"},{"messageId":"256","fix":"298","desc":"258"},{"messageId":"253","fix":"299","desc":"255"},{"messageId":"256","fix":"300","desc":"258"},{"messageId":"253","fix":"301","desc":"255"},{"messageId":"256","fix":"302","desc":"258"},"removeEscape",{"range":"303","text":"304"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"305","text":"306"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"307","text":"304"},{"range":"308","text":"306"},{"range":"309","text":"304"},{"range":"310","text":"306"},{"range":"311","text":"304"},{"range":"312","text":"306"},{"range":"313","text":"304"},{"range":"314","text":"306"},{"range":"315","text":"304"},{"range":"316","text":"306"},{"range":"317","text":"304"},{"range":"318","text":"306"},{"range":"319","text":"304"},{"range":"320","text":"306"},{"range":"321","text":"304"},{"range":"322","text":"306"},{"range":"323","text":"304"},{"range":"324","text":"306"},{"range":"325","text":"304"},{"range":"326","text":"306"},{"range":"327","text":"304"},{"range":"328","text":"306"},{"range":"329","text":"304"},{"range":"330","text":"306"},{"range":"331","text":"304"},{"range":"332","text":"306"},{"range":"333","text":"304"},{"range":"334","text":"306"},{"range":"335","text":"304"},{"range":"336","text":"306"},{"range":"337","text":"304"},{"range":"338","text":"306"},{"range":"339","text":"304"},{"range":"340","text":"306"},{"range":"341","text":"304"},{"range":"342","text":"306"},{"range":"343","text":"304"},{"range":"344","text":"306"},{"range":"345","text":"304"},{"range":"346","text":"306"},{"range":"347","text":"304"},{"range":"348","text":"306"},{"range":"349","text":"304"},{"range":"350","text":"306"},[4458,4459],"",[4458,4458],"\\",[4517,4518],[4517,4517],[11277,11278],[11277,11277],[4458,4459],[4458,4458],[4517,4518],[4517,4517],[11277,11278],[11277,11277],[932,933],[932,932],[936,937],[936,936],[6128,6129],[6128,6128],[6136,6137],[6136,6136],[6153,6154],[6153,6153],[6161,6162],[6161,6161],[6169,6170],[6169,6169],[6177,6178],[6177,6177],[6185,6186],[6185,6185],[6195,6196],[6195,6195],[8791,8792],[8791,8791],[8958,8959],[8958,8958],[9697,9698],[9697,9697],[12221,12222],[12221,12221],[32023,32024],[32023,32023],[37251,37252],[37251,37251],[41069,41070],[41069,41069]]